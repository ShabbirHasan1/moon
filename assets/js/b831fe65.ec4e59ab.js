"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9157],{68129:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var s=t(24246),r=t(71670);const i={title:"Projects"},c=void 0,a={id:"concepts/project",title:"Projects",description:"A project is a library, application, package, binary, tool, etc, that contains source files, test",source:"@site/docs/concepts/project.mdx",sourceDirName:"concepts",slug:"/concepts/project",permalink:"/docs/concepts/project",draft:!1,unlisted:!1,editUrl:"https://github.com/moonrepo/moon/tree/master/website/docs/concepts/project.mdx",tags:[],version:"current",frontMatter:{title:"Projects"},sidebar:"docs",previous:{title:"Query language",permalink:"/docs/concepts/query-lang"},next:{title:"Targets",permalink:"/docs/concepts/target"}},o={},d=[{value:"Names",id:"names",level:2},{value:"Aliases",id:"aliases",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"Configuration",id:"configuration",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["A project is a library, application, package, binary, tool, etc, that contains source files, test\nfiles, assets, resources, and more. A project must exist and be configured within a\n",(0,s.jsx)(n.a,{href:"./workspace",children:"workspace"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"names",children:"Names"}),"\n",(0,s.jsxs)(n.p,{children:["A project name (or identifier) is a unique resource for locating a project. The name is explicitly\nconfigured within ",(0,s.jsx)(n.a,{href:"../config/workspace",children:(0,s.jsx)(n.code,{children:".moon/workspace.yml"})}),", as a key within the\n",(0,s.jsx)(n.a,{href:"../config/workspace#projects",children:(0,s.jsx)(n.code,{children:"projects"})})," setting, and can be written in camel/kebab/snake case.\nNames support ",(0,s.jsx)(n.code,{children:"a-z"}),", ",(0,s.jsx)(n.code,{children:"A-Z"}),", ",(0,s.jsx)(n.code,{children:"0-9"}),", ",(0,s.jsx)(n.code,{children:"_"}),", ",(0,s.jsx)(n.code,{children:"-"}),", ",(0,s.jsx)(n.code,{children:"/"}),", ",(0,s.jsx)(n.code,{children:"."}),", and must start with a character."]}),"\n",(0,s.jsx)(n.p,{children:"Names are used heavily by configuration and the command line to link and reference everything.\nThey're also a much easier concept for remembering projects than file system paths, and they\ntypically can be written with less key strokes."}),"\n",(0,s.jsxs)(n.p,{children:["Lastly, a project name can be paired with a task name to create a ",(0,s.jsx)(n.a,{href:"./target",children:"target"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"aliases",children:"Aliases"}),"\n",(0,s.jsxs)(n.p,{children:["Aliases are a secondary approach for naming projects, and can be used as a drop-in replacement for\nstandard names. What this means is that an alias can also be used when configuring dependencies, or\ndefining ",(0,s.jsx)(n.a,{href:"./target",children:"targets"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["However, the difference between aliases and names is that aliases ",(0,s.jsx)(n.em,{children:"can not"})," be explicit configured\nin moon. Instead, they are specific to a project's primary programming language, and are inferred\nbased on that context (when enabled in settings). For example, a JavaScript or TypeScript project\nwill use the ",(0,s.jsx)(n.code,{children:"name"})," field from its ",(0,s.jsx)(n.code,{children:"package.json"})," as the alias."]}),"\n",(0,s.jsx)(n.p,{children:"Because of this, a project can either be referenced by its name or alias, or both. Choose the\npattern that makes the most sense for your company or team!"}),"\n",(0,s.jsx)(n.h2,{id:"dependencies",children:"Dependencies"}),"\n",(0,s.jsxs)(n.p,{children:["Projects can depend on other projects within the ",(0,s.jsx)(n.a,{href:"./workspace",children:"workspace"})," to build a\n",(0,s.jsx)(n.a,{href:"../how-it-works/action-graph",children:"project graph"}),", and in turn, an action graph for executing\n",(0,s.jsx)(n.a,{href:"./task",children:"tasks"}),". Project dependencies are divided into 2 categories:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Explicit dependencies"})," - These are dependencies that are explicitly defined in a project's\n",(0,s.jsx)(n.a,{href:"../config/project",children:(0,s.jsx)(n.code,{children:"moon.yml"})})," config file, using the ",(0,s.jsx)(n.a,{href:"../config/project#dependson",children:(0,s.jsx)(n.code,{children:"dependsOn"})}),"\nsetting."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Implicit dependencies"})," - These are dependencies that are implicitly discovered by moon when\nscanning the repository. How an implicit dependency is discovered is based on the project's\n",(0,s.jsx)(n.a,{href:"../config/project#language",children:(0,s.jsx)(n.code,{children:"language"})})," setting, and how that language's ecosystem functions."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["Projects can be configured with an optional ",(0,s.jsx)(n.a,{href:"../config/project",children:(0,s.jsx)(n.code,{children:"moon.yml"})})," in the project root, or\nthrough the optional workspace-level ",(0,s.jsx)(n.a,{href:"../config/tasks",children:(0,s.jsx)(n.code,{children:".moon/tasks.yml"})}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},71670:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>c});var s=t(27378);const r={},i=s.createContext(r);function c(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);