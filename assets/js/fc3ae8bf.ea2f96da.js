"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[15411],{46703:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>h});var s=t(24246),i=t(71670),o=t(32189),r=t(79022);const a={title:".moon/tasks.yml, .moon/tasks/**/*.yml",sidebar_label:".moon/tasks..."},c=void 0,l={id:"config/tasks",title:".moon/tasks.yml, .moon/tasks/**/*.yml",description:"The .moon/tasks.yml file configures file groups and tasks that are inherited by every project in",source:"@site/docs/config/tasks.mdx",sourceDirName:"config",slug:"/config/tasks",permalink:"/docs/config/tasks",draft:!1,unlisted:!1,editUrl:"https://github.com/moonrepo/moon/tree/master/website/docs/config/tasks.mdx",tags:[],version:"current",frontMatter:{title:".moon/tasks.yml, .moon/tasks/**/*.yml",sidebar_label:".moon/tasks..."},sidebar:"docs",previous:{title:".moon/toolchain.yml",permalink:"/docs/config/toolchain"},next:{title:"moon.yml",permalink:"/docs/config/project"}},d={},h=[{value:"<code>extends</code>",id:"extends",level:2},{value:"<code>fileGroups</code>",id:"filegroups",level:2},{value:"<code>implicitDeps</code>",id:"implicitdeps",level:2},{value:"<code>implicitInputs</code>",id:"implicitinputs",level:2},{value:"<code>tasks</code>",id:"tasks",level:2},{value:"<code>taskOptions</code><VersionLabel></VersionLabel>",id:"taskoptions",level:2}];function p(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:".moon/tasks.yml"})," file configures file groups and tasks that are inherited by ",(0,s.jsx)(n.em,{children:"every"})," project in\nthe workspace, while ",(0,s.jsx)(n.code,{children:".moon/tasks/**/*.yml"})," configures for projects based on their language or type.\n",(0,s.jsx)(n.a,{href:"../concepts/task-inheritance",children:"Learn more about task inheritance!"})]}),"\n",(0,s.jsxs)(n.p,{children:["Projects can override or merge with these settings within their respective ",(0,s.jsx)(n.a,{href:"./project",children:(0,s.jsx)(n.code,{children:"moon.yml"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/tasks.yml"',children:"$schema: 'https://moonrepo.dev/schemas/tasks.json'\n"})}),"\n",(0,s.jsx)(n.h2,{id:"extends",children:(0,s.jsx)(n.code,{children:"extends"})}),"\n",(0,s.jsx)(o.Z,{to:"/api/types/interface/InheritedTasksConfig#extends"}),"\n",(0,s.jsxs)(n.p,{children:["Defines an external ",(0,s.jsx)(n.code,{children:".moon/tasks.yml"})," to extend and inherit settings from. Perfect for reusability\nand sharing configuration across repositories and projects. When defined, this setting must be an\nHTTPS URL ",(0,s.jsx)(n.em,{children:"or"})," relative file system path that points to a valid YAML document!"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/tasks.yml" {1}',children:"extends: 'https://raw.githubusercontent.com/organization/repository/master/.moon/tasks.yml'\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:["For map-based settings, ",(0,s.jsx)(n.code,{children:"fileGroups"})," and ",(0,s.jsx)(n.code,{children:"tasks"}),", entries from both the extended configuration and\nlocal configuration are merged into a new map, with the values of the local taking precedence. Map\nvalues ",(0,s.jsx)(n.em,{children:"are not"})," deep merged!"]})}),"\n",(0,s.jsx)(n.h2,{id:"filegroups",children:(0,s.jsx)(n.code,{children:"fileGroups"})}),"\n",(0,s.jsx)(o.Z,{to:"/api/types/interface/InheritedTasksConfig#fileGroups"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["For more information on file group configuration, refer to the\n",(0,s.jsx)(n.a,{href:"./project#filegroups",children:(0,s.jsx)(n.code,{children:"fileGroups"})})," section in the ",(0,s.jsx)(n.a,{href:"./project",children:(0,s.jsx)(n.code,{children:"moon.yml"})})," doc."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Defines ",(0,s.jsx)(n.a,{href:"../concepts/file-group",children:"file groups"})," that will be inherited by projects, and also enables\nenforcement of organizational patterns and file locations. For example, encourage projects to place\nsource files in a ",(0,s.jsx)(n.code,{children:"src"})," folder, and all test files in ",(0,s.jsx)(n.code,{children:"tests"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/tasks.yml"',children:"fileGroups:\n  configs:\n    - '*.config.{js,cjs,mjs}'\n    - '*.json'\n  sources:\n    - 'src/**/*'\n    - 'types/**/*'\n  tests:\n    - 'tests/**/*'\n    - '**/__tests__/**/*'\n  assets:\n    - 'assets/**/*'\n    - 'images/**/*'\n    - 'static/**/*'\n    - '**/*.{scss,css}'\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"File paths and globs used within a file group are relative from the inherited project's root, and\nnot the workspace root."})}),"\n",(0,s.jsx)(n.h2,{id:"implicitdeps",children:(0,s.jsx)(n.code,{children:"implicitDeps"})}),"\n",(0,s.jsx)(o.Z,{to:"/api/types/interface/InheritedTasksConfig#implicitDeps"}),"\n",(0,s.jsxs)(n.p,{children:["Defines task ",(0,s.jsx)(n.a,{href:"./project#deps",children:(0,s.jsx)(n.code,{children:"deps"})})," that are implicitly inserted into ",(0,s.jsx)(n.em,{children:"all"})," inherited tasks within\na project. This is extremely useful for pre-building projects that are used extensively throughout\nthe repo, or always building project dependencies. Defaults to an empty list."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/tasks.yml" {1-2}',children:"implicitDeps:\n  - '^:build'\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Implicit dependencies are ",(0,s.jsx)(n.em,{children:"always"})," inherited, regardless of the ",(0,s.jsx)(n.a,{href:"./project#mergedeps",children:(0,s.jsx)(n.code,{children:"mergeDeps"})}),"\noption."]})}),"\n",(0,s.jsx)(n.h2,{id:"implicitinputs",children:(0,s.jsx)(n.code,{children:"implicitInputs"})}),"\n",(0,s.jsx)(o.Z,{to:"/api/types/interface/InheritedTasksConfig#implicitInputs"}),"\n",(0,s.jsxs)(n.p,{children:["Defines task ",(0,s.jsx)(n.a,{href:"./project#inputs",children:(0,s.jsx)(n.code,{children:"inputs"})})," that are implicitly inserted into ",(0,s.jsx)(n.em,{children:"all"}),' inherited tasks\nwithin a project. This is extremely useful for the "changes to these files should always trigger a\ntask" scenario.']}),"\n",(0,s.jsxs)(n.p,{children:["Like ",(0,s.jsx)(n.code,{children:"inputs"}),", file paths/globs defined here are relative from the inheriting project.\n",(0,s.jsx)(n.a,{href:"../concepts/file-pattern#project-relative",children:"Project and workspace relative file patterns"})," are\nsupported and encouraged."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/tasks/node.yml" {1-2}',children:"implicitInputs:\n  - 'package.json'\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Implicit inputs are ",(0,s.jsx)(n.em,{children:"always"})," inherited, regardless of the ",(0,s.jsx)(n.a,{href:"./project#mergeinputs",children:(0,s.jsx)(n.code,{children:"mergeInputs"})}),"\noption."]})}),"\n",(0,s.jsx)(n.h2,{id:"tasks",children:(0,s.jsx)(n.code,{children:"tasks"})}),"\n",(0,s.jsx)(o.Z,{to:"/api/types/interface/InheritedTasksConfig#tasks"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["For more information on task configuration, refer to the ",(0,s.jsx)(n.a,{href:"./project#tasks",children:(0,s.jsx)(n.code,{children:"tasks"})})," section in the\n",(0,s.jsx)(n.a,{href:"./project",children:(0,s.jsx)(n.code,{children:"moon.yml"})})," doc."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["As mentioned in the link above, ",(0,s.jsx)(n.a,{href:"../concepts/task",children:"tasks"})," are actions that are ran within the\ncontext of a project, and commonly wrap a command. For most workspaces, every project ",(0,s.jsx)(n.em,{children:"should"})," have\nlinting, typechecking, testing, code formatting, so on and so forth. To reduce the amount of\nboilerplate that ",(0,s.jsx)(n.em,{children:"every"})," project would require, this setting offers the ability to define tasks that\nare inherited by many projects within the workspace, but can also be overridden per project."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/tasks.yml"',children:"tasks:\n  format:\n    command: 'prettier --check .'\n\n  lint:\n    command: 'eslint --no-error-on-unmatched-pattern .'\n\n  test:\n    command: 'jest --passWithNoTests'\n\n  typecheck:\n    command: 'tsc --build'\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"Relative file paths and globs used within a task are relative from the inherited project's root, and\nnot the workspace root."})}),"\n",(0,s.jsxs)(n.h2,{id:"taskoptions",children:[(0,s.jsx)(n.code,{children:"taskOptions"}),(0,s.jsx)(r.Z,{version:"1.20.0"})]}),"\n",(0,s.jsx)(o.Z,{to:"/api/types/interface/InheritedTasksConfig#taskOptions"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["For more information on task options, refer to the ",(0,s.jsx)(n.a,{href:"./project#options",children:(0,s.jsx)(n.code,{children:"options"})})," section in the\n",(0,s.jsx)(n.a,{href:"./project",children:(0,s.jsx)(n.code,{children:"moon.yml"})})," doc."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Like ",(0,s.jsx)(n.a,{href:"#tasks",children:"tasks"}),", this setting allows you to define task options that will be inherited by ",(0,s.jsx)(n.em,{children:"all\ntasks"})," within the configured file, and by all project-level inherited tasks. This setting is the 1st\nlink in the inheritance chain, and can be overridden within each task."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/tasks.yml"',children:"taskOptions:\n  # Never cache builds\n  cache: false\n  # Always re-run flaky tests\n  retryCount: 2\n\ntasks:\n  build:\n    # ...\n    options:\n      # Override the default cache setting\n      cache: true\n"})})]})}function m(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},32189:(e,n,t)=>{t.d(n,{Z:()=>r});var s=t(83469),i=t(31792),o=t(24246);function r(e){let{to:n}=e;return(0,o.jsx)("a",{href:n,target:"_blank",className:"float-right inline-block",style:{marginTop:"-3em"},children:(0,o.jsx)(i.Z,{icon:s.dT$})})}},79022:(e,n,t)=>{t.d(n,{Z:()=>o});var s=t(9619),i=t(24246);function o(e){let{header:n,inline:t,updated:o,version:r}=e;return(0,i.jsx)(s.Z,{text:`v${r}`,variant:o?"success":"info",className:n?"absolute right-0 top-1.5":t?"inline-block":"ml-2"})}},9619:(e,n,t)=>{t.d(n,{Z:()=>a});var s=t(40624),i=t(31792),o=t(24246);const r={failure:"bg-red-100 text-red-900",info:"bg-pink-100 text-pink-900",success:"bg-green-100 text-green-900",warning:"bg-orange-100 text-orange-900"};function a(e){let{className:n,icon:t,text:a,variant:c}=e;return(0,o.jsxs)("span",{className:(0,s.Z)("inline-flex items-center px-1 py-0.5 rounded text-xs font-bold uppercase",c?r[c]:"bg-gray-100 text-gray-800",n),children:[t&&(0,o.jsx)(i.Z,{icon:t,className:"mr-1"}),a]})}},71670:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>r});var s=t(27378);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);