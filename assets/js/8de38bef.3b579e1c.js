"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[64197],{73895:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>j,frontMatter:()=>c,metadata:()=>a,toc:()=>h});var i=s(24246),o=s(71670),r=(s(33337),s(39798),s(32189)),t=(s(9785),s(79022));const c={title:".moon/toolchain.yml",toc_max_heading_level:6},l=void 0,a={id:"config/toolchain",title:".moon/toolchain.yml",description:"The .moon/toolchain.yml file configures the toolchain and the workspace development environment.",source:"@site/docs/config/toolchain.mdx",sourceDirName:"config",slug:"/config/toolchain",permalink:"/docs/config/toolchain",draft:!1,unlisted:!1,editUrl:"https://github.com/moonrepo/moon/tree/master/website/docs/config/toolchain.mdx",tags:[],version:"current",frontMatter:{title:".moon/toolchain.yml",toc_max_heading_level:6},sidebar:"docs",previous:{title:".moon/workspace.yml",permalink:"/docs/config/workspace"},next:{title:".moon/tasks...",permalink:"/docs/config/tasks"}},d={},h=[{value:"<code>extends</code>",id:"extends",level:2},{value:"JavaScript",id:"javascript",level:2},{value:"<code>bun</code><VersionLabel></VersionLabel>",id:"bun",level:2},{value:"<code>version</code>",id:"version",level:3},{value:"<code>installArgs</code><VersionLabel></VersionLabel>",id:"installargs",level:3},{value:"Inherited from <code>node</code>",id:"inherited-from-node",level:3},{value:"<code>deno</code>",id:"deno",level:2},{value:"<code>version</code><VersionLabel></VersionLabel>",id:"version-1",level:3},{value:"<code>bins</code><VersionLabel></VersionLabel>",id:"bins",level:3},{value:"<code>depsFile</code>",id:"depsfile",level:3},{value:"<code>lockfile</code>",id:"lockfile",level:3},{value:"<code>node</code>",id:"node",level:2},{value:"<code>version</code>",id:"version-2",level:3},{value:"<code>packageManager</code>",id:"packagemanager",level:3},{value:"<code>npm</code>, <code>pnpm</code>, <code>yarn</code>, <code>bun</code>",id:"npm-pnpm-yarn-bun",level:3},{value:"<code>version</code>",id:"version-3",level:4},{value:"<code>installArgs</code><VersionLabel></VersionLabel>",id:"installargs-1",level:4},{value:"<code>yarn</code>",id:"yarn",level:3},{value:"<code>plugins</code>",id:"plugins",level:4},{value:"<code>addEnginesConstraint</code>",id:"addenginesconstraint",level:3},{value:"<code>binExecArgs</code>",id:"binexecargs",level:3},{value:"<code>dedupeOnLockfileChange</code>",id:"dedupeonlockfilechange",level:3},{value:"<code>dependencyVersionFormat</code>",id:"dependencyversionformat",level:3},{value:"<code>inferTasksFromScripts</code>",id:"infertasksfromscripts",level:3},{value:"<code>rootPackageOnly</code>",id:"rootpackageonly",level:3},{value:"<code>syncProjectWorkspaceDependencies</code>",id:"syncprojectworkspacedependencies",level:3},{value:"<code>syncVersionManagerConfig</code>",id:"syncversionmanagerconfig",level:3},{value:"<code>typescript</code>",id:"typescript",level:2},{value:"<code>createMissingConfig</code>",id:"createmissingconfig",level:3},{value:"<code>includeProjectReferenceSources</code><VersionLabel></VersionLabel>",id:"includeprojectreferencesources",level:3},{value:"<code>includeSharedTypes</code><VersionLabel></VersionLabel>",id:"includesharedtypes",level:3},{value:"<code>projectConfigFileName</code>",id:"projectconfigfilename",level:3},{value:"<code>root</code>",id:"root",level:3},{value:"<code>rootConfigFileName</code>",id:"rootconfigfilename",level:3},{value:"<code>rootOptionsConfigFileName</code>",id:"rootoptionsconfigfilename",level:3},{value:"<code>routeOutDirToCache</code>",id:"routeoutdirtocache",level:3},{value:"<code>syncProjectReferences</code>",id:"syncprojectreferences",level:3},{value:"<code>syncProjectReferencesToPaths</code>",id:"syncprojectreferencestopaths",level:3},{value:"Rust",id:"rust",level:2},{value:"<code>rust</code><VersionLabel></VersionLabel>",id:"rust-1",level:2},{value:"<code>version</code>",id:"version-4",level:3},{value:"<code>bins</code><VersionLabel></VersionLabel>",id:"bins-1",level:3},{value:"<code>components</code><VersionLabel></VersionLabel>",id:"components",level:3},{value:"<code>syncToolchainConfig</code>",id:"synctoolchainconfig",level:3},{value:"<code>targets</code><VersionLabel></VersionLabel>",id:"targets",level:3}];function p(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:".moon/toolchain.yml"})," file configures the toolchain and the workspace development environment.\nThis file is ",(0,i.jsx)(n.em,{children:"optional"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Managing tool version's within the toolchain ensures a deterministic environment across any machine\n(whether a developer, CI, or production machine)."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml"',children:"$schema: 'https://moonrepo.dev/schemas/toolchain.json'\n"})}),"\n",(0,i.jsx)(n.h2,{id:"extends",children:(0,i.jsx)(n.code,{children:"extends"})}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/ToolchainConfig#extends"}),"\n",(0,i.jsxs)(n.p,{children:["Defines an external ",(0,i.jsx)(n.code,{children:".moon/toolchain.yml"})," to extend and inherit settings from. Perfect for\nreusability and sharing configuration across repositories and projects. When defined, this setting\nmust be an HTTPS URL ",(0,i.jsx)(n.em,{children:"or"})," relative file system path that points to a valid YAML document!"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {1}',children:"extends: 'https://raw.githubusercontent.com/organization/repository/master/.moon/toolchain.yml'\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsx)(n.p,{children:"Settings will be merged recursively for blocks, with values defined in the local configuration\ntaking precedence over those defined in the extended configuration."})}),"\n",(0,i.jsx)(n.h2,{id:"javascript",children:"JavaScript"}),"\n",(0,i.jsxs)(n.h2,{id:"bun",children:[(0,i.jsx)(n.code,{children:"bun"}),(0,i.jsx)(t.Z,{version:"1.17.0"})]}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/ToolchainConfig#bun"}),"\n",(0,i.jsxs)(n.p,{children:["Enables and configures ",(0,i.jsx)(n.a,{href:"../guides/javascript/bun-handbook",children:"Bun"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"version",children:(0,i.jsx)(n.code,{children:"version"})}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/BunConfig#version"}),"\n",(0,i.jsxs)(n.p,{children:["Defines the explicit Bun toolchain\n",(0,i.jsx)(n.a,{href:"../concepts/toolchain#version-specification",children:"version specification"})," to use. If this field is ",(0,i.jsx)(n.em,{children:"not\ndefined"}),", the global ",(0,i.jsx)(n.code,{children:"bun"})," binary will be used."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2}',children:"bun:\n  version: '1.0.0'\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Version can also be defined with ",(0,i.jsx)(n.a,{href:"../proto/config",children:(0,i.jsx)(n.code,{children:".prototools"})}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"installargs",children:[(0,i.jsx)(n.code,{children:"installArgs"}),(0,i.jsx)(t.Z,{version:"1.22.0"})]}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/BunConfig#installArgs"}),"\n",(0,i.jsxs)(n.p,{children:["Customize the arguments that will be passed to the ",(0,i.jsx)(n.code,{children:"bun install"})," command, when the ",(0,i.jsx)(n.code,{children:"InstallDeps"}),"\naction is triggered in the pipeline. These arguments are used both locally and in CI."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2}',children:"bun:\n  installArgs: ['--frozen-lockfile']\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"inherited-from-node",children:["Inherited from ",(0,i.jsx)(n.code,{children:"node"})]}),"\n",(0,i.jsxs)(n.p,{children:["Since Bun and Node.js have a lot of overlap in functionality, the following ",(0,i.jsx)(n.a,{href:"#node",children:(0,i.jsx)(n.code,{children:"node"})})," settings\ncan also be configured within ",(0,i.jsx)(n.code,{children:"bun"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#dependencyversionformat",children:(0,i.jsx)(n.code,{children:"dependencyVersionFormat"})})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#infertasksfromscripts",children:(0,i.jsx)(n.code,{children:"inferTasksFromScripts"})})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#rootpackageonly",children:(0,i.jsx)(n.code,{children:"rootPackageOnly"})})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#syncprojectworkspacedependencies",children:(0,i.jsx)(n.code,{children:"syncProjectWorkspaceDependencies"})})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2-4}',children:"bun:\n  dependencyVersionFormat: 'workspace'\n  inferTasksFromScripts: true\n  rootPackageOnly: true\n  syncProjectWorkspaceDependencies: true\n"})}),"\n",(0,i.jsx)(n.h2,{id:"deno",children:(0,i.jsx)(n.code,{children:"deno"})}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/ToolchainConfig#deno"}),"\n",(0,i.jsxs)(n.p,{children:["Enables and configures ",(0,i.jsx)(n.a,{href:"../guides/javascript/deno-handbook",children:"Deno"}),"."]}),"\n",(0,i.jsxs)(n.h3,{id:"version-1",children:[(0,i.jsx)(n.code,{children:"version"}),(0,i.jsx)(t.Z,{version:"1.21.0"})]}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/DenoConfig#version"}),"\n",(0,i.jsxs)(n.p,{children:["Defines the explicit Deno toolchain\n",(0,i.jsx)(n.a,{href:"../concepts/toolchain#version-specification",children:"version specification"})," to use. If this field is ",(0,i.jsx)(n.em,{children:"not\ndefined"}),", the global ",(0,i.jsx)(n.code,{children:"deno"})," binary will be used."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2}',children:"deno:\n  version: '1.40.0'\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"bins",children:[(0,i.jsx)(n.code,{children:"bins"}),(0,i.jsx)(t.Z,{version:"1.10.0"})]}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/DenoConfig#bins"}),"\n",(0,i.jsxs)(n.p,{children:["A list of binaries to install globally into Deno (",(0,i.jsx)(n.code,{children:"~/.deno/bin"}),"). This setting requires a list of\nURLs or binary configuration objects with the following fields:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"bin"})," (required) - URL of the binary."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"name"})," - Provide a custom name for the binary."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"local"})," - Only install the binary locally, and not in CI."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"force"})," - Force install the binary. This ",(0,i.jsx)(n.em,{children:"should"})," be toggled for one-offs."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2-5}',children:"deno:\n  bins:\n    - 'https://deno.land/std@0.192.0/http/file_server.ts'\n    - bin: 'https://deno.land/std@0.192.0/http/file_server.ts'\n      name: 'fs'\n"})}),"\n",(0,i.jsx)(n.h3,{id:"depsfile",children:(0,i.jsx)(n.code,{children:"depsFile"})}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/DenoConfig#depsFile"}),"\n",(0,i.jsxs)(n.p,{children:["Path to the\n",(0,i.jsx)(n.a,{href:"https://deno.land/manual/basics/modules#it-seems-unwieldy-to-import-urls-everywhere",children:"dependencies file"}),"\nthat's used for re-exporting external libraries. This file is heavily used in hashing and caching\nrelated scenarios. Defaults to ",(0,i.jsx)(n.code,{children:"deps.ts"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2}',children:"deno:\n  depsFile: 'src/deps.ts'\n"})}),"\n",(0,i.jsx)(n.h3,{id:"lockfile",children:(0,i.jsx)(n.code,{children:"lockfile"})}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/DenoConfig#lockfile"}),"\n",(0,i.jsxs)(n.p,{children:["Enables lockfile (",(0,i.jsx)(n.code,{children:"deno.lock"}),") support for Deno dependencies. When enabled, will run\n",(0,i.jsx)(n.a,{href:"https://deno.land/manual/basics/modules/integrity_checking",children:(0,i.jsx)(n.code,{children:"deno cache"})})," as part of the dependency\ninstallation action. Defaults to ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2}',children:"deno:\n  lockfile: true\n"})}),"\n",(0,i.jsx)(n.h2,{id:"node",children:(0,i.jsx)(n.code,{children:"node"})}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/ToolchainConfig#node"}),"\n",(0,i.jsxs)(n.p,{children:["Enables and configures ",(0,i.jsx)(n.a,{href:"../guides/javascript/node-handbook",children:"Node.js"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"version-2",children:(0,i.jsx)(n.code,{children:"version"})}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/NodeConfig#version"}),"\n",(0,i.jsxs)(n.p,{children:["Defines the explicit Node.js ",(0,i.jsx)(n.a,{href:"../concepts/toolchain#version-specification",children:"version specification"})," to\nuse. If this field is ",(0,i.jsx)(n.em,{children:"not defined"}),", the global ",(0,i.jsx)(n.code,{children:"node"})," binary will be used."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2}',children:"node:\n  version: '16.13'\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Version can also be defined with ",(0,i.jsx)(n.a,{href:"../proto/config",children:(0,i.jsx)(n.code,{children:".prototools"})})," or with the ",(0,i.jsx)(n.code,{children:"MOON_NODE_VERSION"}),"\nenvironment variable."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"packagemanager",children:(0,i.jsx)(n.code,{children:"packageManager"})}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/NodeConfig#packageManager"}),"\n",(0,i.jsxs)(n.p,{children:["Defines which package manager to utilize. Supports ",(0,i.jsx)(n.code,{children:"npm"})," (default), ",(0,i.jsx)(n.code,{children:"pnpm"}),", ",(0,i.jsx)(n.code,{children:"yarn"}),", or ",(0,i.jsx)(n.code,{children:"bun"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2}',children:"node:\n  packageManager: 'yarn'\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"npm-pnpm-yarn-bun",children:[(0,i.jsx)(n.code,{children:"npm"}),", ",(0,i.jsx)(n.code,{children:"pnpm"}),", ",(0,i.jsx)(n.code,{children:"yarn"}),", ",(0,i.jsx)(n.code,{children:"bun"})]}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/NodePackageManagerConfig"}),"\n",(0,i.jsxs)(n.p,{children:["Optional fields for defining package manager specific configuration. The chosen setting is dependent\non the value of ",(0,i.jsx)(n.a,{href:"#packagemanager",children:(0,i.jsx)(n.code,{children:"node.packageManager"})}),". If these settings ",(0,i.jsx)(n.em,{children:"are not defined"}),", the\nlatest version of the active package manager will be used (when applicable)."]}),"\n",(0,i.jsx)(n.h4,{id:"version-3",children:(0,i.jsx)(n.code,{children:"version"})}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/NpmConfig#version"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"version"})," setting defines the explicit package manager\n",(0,i.jsx)(n.a,{href:"../concepts/toolchain#version-specification",children:"version specification"})," to use. If this field is ",(0,i.jsx)(n.em,{children:"not\ndefined"}),", the global ",(0,i.jsx)(n.code,{children:"npm"}),", ",(0,i.jsx)(n.code,{children:"pnpm"}),", ",(0,i.jsx)(n.code,{children:"yarn"}),", and ",(0,i.jsx)(n.code,{children:"bun"})," binaries will be used."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {4}',children:"node:\n  packageManager: 'yarn'\n  yarn:\n    version: '3.1.0'\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Version can also be defined with ",(0,i.jsx)(n.a,{href:"../proto/config",children:(0,i.jsx)(n.code,{children:".prototools"})})," or with the ",(0,i.jsx)(n.code,{children:"MOON_NPM_VERSION"}),",\n",(0,i.jsx)(n.code,{children:"MOON_PNPM_VERSION"}),", ",(0,i.jsx)(n.code,{children:"MOON_YARN_VERSION"}),", or ",(0,i.jsx)(n.code,{children:"MOON_BUN_VERSION"})," environment variables."]}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"installargs-1",children:[(0,i.jsx)(n.code,{children:"installArgs"}),(0,i.jsx)(t.Z,{version:"1.22.0"})]}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/NpmConfig#installArgs"}),"\n",(0,i.jsxs)(n.p,{children:["Customize the arguments that will be passed to the package manager's install command, when the\n",(0,i.jsx)(n.code,{children:"InstallDeps"})," action is triggered in the pipeline. These arguments are used both locally and in CI."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {4}',children:"node:\n  packageManager: 'yarn'\n  yarn:\n    installArgs: ['--immutable']\n"})}),"\n",(0,i.jsx)(n.h3,{id:"yarn",children:(0,i.jsx)(n.code,{children:"yarn"})}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/NodeConfig#yarn"}),"\n",(0,i.jsx)(n.h4,{id:"plugins",children:(0,i.jsx)(n.code,{children:"plugins"})}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/YarnConfig#plugins"}),"\n",(0,i.jsxs)(n.p,{children:["A list of plugins that will automatically be imported using ",(0,i.jsx)(n.code,{children:"yarn plugin import"})," (Yarn 2+ only). For\nperformance reasons, plugins will only be imported when the Yarn version changes."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {4}',children:"node:\n  packageManager: 'yarn'\n  yarn:\n    version: '3.1.0'\n    plugins:\n      - 'interactive-tools'\n      - 'workspace-tools'\n"})}),"\n",(0,i.jsx)(n.h3,{id:"addenginesconstraint",children:(0,i.jsx)(n.code,{children:"addEnginesConstraint"})}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/NodeConfig#addEnginesConstraint"}),"\n",(0,i.jsxs)(n.p,{children:["Injects the currently configured ",(0,i.jsx)(n.a,{href:"#version",children:"Node.js version"})," as an ",(0,i.jsx)(n.code,{children:"engines"})," constraint to the root\n",(0,i.jsx)(n.code,{children:"package.json"})," field. Defaults to ",(0,i.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"node:\n  addEnginesConstraint: true\n"})}),"\n",(0,i.jsxs)(n.p,{children:['For example, say our Node.js version is "16.15.0", and when we execute a run process through the\n',(0,i.jsx)(n.code,{children:"moon"})," binary, it will update the root ",(0,i.jsx)(n.code,{children:"package.json"})," with the below. We pin a fixed version to\nensure other Node.js processes outside of our toolchain are utilizing the same version."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'{\n  // ...\n  "engines": {\n    "node": "16.15.0"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"binexecargs",children:(0,i.jsx)(n.code,{children:"binExecArgs"})}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/NodeConfig#binExecArgs"}),"\n",(0,i.jsxs)(n.p,{children:["Additional ",(0,i.jsx)(n.a,{href:"https://nodejs.org/api/cli.html",children:"command line arguments"})," to pass to the ",(0,i.jsx)(n.code,{children:"node"})," binary\nwhen it's being executed by running a target. This will apply arguments to ",(0,i.jsx)(n.em,{children:"all Node.js based"}),"\ntargets, and cannot be changed on a per target basis."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2-5}',children:"node:\n  binExecArgs:\n    - '--preserve-symlinks'\n    - '--loader'\n    - '@boost/module/loader'\n"})}),"\n",(0,i.jsx)(n.h3,{id:"dedupeonlockfilechange",children:(0,i.jsx)(n.code,{children:"dedupeOnLockfileChange"})}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/NodeConfig#dedupeOnLockfileChange"}),"\n",(0,i.jsxs)(n.p,{children:["Will dedupe dependencies after they have been installed, added, removing, or changed in any way, in\nan effort to keep the workspace tree as clean and lean as possible. Defaults to ",(0,i.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2}',children:"node:\n  dedupeOnLockfileChange: true\n"})}),"\n",(0,i.jsx)(n.h3,{id:"dependencyversionformat",children:(0,i.jsx)(n.code,{children:"dependencyVersionFormat"})}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/NodeConfig#dependencyVersionFormat"}),"\n",(0,i.jsxs)(n.p,{children:["When ",(0,i.jsx)(n.a,{href:"#syncprojectworkspacedependencies",children:"syncing project dependencies"}),", customize the format that\nwill be used for the dependency version range. The following formats are supported (but use the one\nmost applicable to your chosen package manager):"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"file"})," (npm default) - Uses ",(0,i.jsx)(n.code,{children:"file:../relative/path"})," and copies package contents."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"link"})," - Uses ",(0,i.jsx)(n.code,{children:"link:../relative/path"})," and symlinks package contents."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"star"})," - Uses an explicit ",(0,i.jsx)(n.code,{children:"*"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"version"})," - Uses the explicit version from the dependent project's ",(0,i.jsx)(n.code,{children:"package.json"}),', e.g., "1.2.3".']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"version-caret"})," - Uses the version from the dependent project's ",(0,i.jsx)(n.code,{children:"package.json"}),' as a caret range,\ne.g., "^1.2.3".']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"version-tilde"})," - Uses the version from the dependent project's ",(0,i.jsx)(n.code,{children:"package.json"}),' as a tilde range,\ne.g., "~1.2.3".']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"workspace"})," (bun/pnpm/yarn default) - Uses ",(0,i.jsx)(n.code,{children:"workspace:*"}),', which resolves to "1.2.3". Requires\npackage workspaces.']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"workspace-caret"})," - Uses ",(0,i.jsx)(n.code,{children:"workspace:^"}),', which resolves to "^1.2.3". Requires package workspaces.']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"workspace-tilde"})," - Uses ",(0,i.jsx)(n.code,{children:"workspace:~"}),', which resolves to "~1.2.3". Requires package workspaces.']}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2}',children:"node:\n  dependencyVersionFormat: 'link'\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["This setting does not apply to peer dependencies, as they will always use a format of\n",(0,i.jsx)(n.code,{children:"^<major>.0.0"}),". Furthermore, if a package manager does not support a chosen format, it will\nfallback to another format!"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"infertasksfromscripts",children:(0,i.jsx)(n.code,{children:"inferTasksFromScripts"})}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/NodeConfig#inferTasksFromScripts"}),"\n",(0,i.jsxs)(n.p,{children:["Will infer and automatically create ",(0,i.jsx)(n.a,{href:"../concepts/task",children:"tasks"})," from ",(0,i.jsx)(n.code,{children:"package.json"})," scripts. Defaults\nto ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["This requires the ",(0,i.jsx)(n.a,{href:"./project#language",children:"project's language"}),' to be "javascript" or "typescript", a\n',(0,i.jsx)(n.code,{children:"package.json"})," to exist in the project, and will take the following into account:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Script names will be converted to kebab-case, and will become the task ID."}),"\n",(0,i.jsx)(n.li,{children:"Pre, post, and life cycle hooks are ignored."}),"\n",(0,i.jsxs)(n.li,{children:["Tasks defined in ",(0,i.jsx)(n.code,{children:".moon/tasks.yml"})," or ",(0,i.jsx)(n.code,{children:"moon.yml"})," take precedence over scripts of the same name."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["To verify inferred tasks, run ",(0,i.jsx)(n.a,{href:"../commands/project",children:(0,i.jsx)(n.code,{children:"moon project <id>"})})," (pass ",(0,i.jsx)(n.code,{children:"--json"})," to view raw\nconfig and options). Tasks that are inferred will run through the configured package manager."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2}',children:"node:\n  inferTasksFromScripts: true\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsxs)(n.p,{children:["This implementation shares functionality with\n",(0,i.jsx)(n.a,{href:"../commands/migrate/from-package-json",children:(0,i.jsx)(n.code,{children:"moon migrate from-package-json"})}),", and will attempt to\ndetermine environment variables, outputs, CI options, and more! Be aware of these when utilizing\nthis feature, especially in regards to ",(0,i.jsx)(n.code,{children:"runInCI"}),", as it may be inaccurate!"]})}),"\n",(0,i.jsx)(n.h3,{id:"rootpackageonly",children:(0,i.jsx)(n.code,{children:"rootPackageOnly"})}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/NodeConfig#rootPackageOnly"}),"\n",(0,i.jsxs)(n.p,{children:['Supports the "single version policy" or "one version rule" patterns by only allowing dependencies in\nthe root ',(0,i.jsx)(n.code,{children:"package.json"}),", and only installing dependencies in the workspace root, and not within\nindividual projects. It also bypasses all ",(0,i.jsx)(n.code,{children:"workspaces"})," checks to determine package locations.\nDefaults to ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2}',children:"node:\n  rootPackageOnly: true\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["This setting ",(0,i.jsx)(n.em,{children:"does not"})," verify that other ",(0,i.jsx)(n.code,{children:"package.json"}),"s ",(0,i.jsx)(n.em,{children:"do not"}),' have dependencies, it merely runs\n"install dependency" commands in the root. It\'s up to you to ensure that other ',(0,i.jsx)(n.code,{children:"package.json"}),"s do\nnot have dependencies."]})}),"\n",(0,i.jsx)(n.h3,{id:"syncprojectworkspacedependencies",children:(0,i.jsx)(n.code,{children:"syncProjectWorkspaceDependencies"})}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/NodeConfig#syncProjectWorkspaceDependencies"}),"\n",(0,i.jsxs)(n.p,{children:["Will sync a project's ",(0,i.jsx)(n.a,{href:"../concepts/project#dependencies",children:"dependencies"})," as normal dependencies within\nthe project's ",(0,i.jsx)(n.code,{children:"package.json"}),". If a dependent project does not have a ",(0,i.jsx)(n.code,{children:"package.json"}),", or if a\ndependency of the same name has an explicit version already defined, the sync will be skipped.\nDefaults to ",(0,i.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2}',children:"node:\n  syncProjectWorkspaceDependencies: true\n"})}),"\n",(0,i.jsxs)(n.p,{children:["A quick example on how this works. Given the following ",(0,i.jsx)(n.code,{children:"dependsOn"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title="moon.yml"',children:"dependsOn:\n  - 'designSystem'\n  - 'reactHooks'\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Would result in the following ",(0,i.jsx)(n.code,{children:"dependencies"})," within a project's ",(0,i.jsx)(n.code,{children:"package.json"}),". The version format\ncan be customized with ",(0,i.jsx)(n.a,{href:"#dependencyversionformat",children:(0,i.jsx)(n.code,{children:"node.dependencyVersionFormat"})}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'{\n  // ...\n  "dependencies": {\n    "@company/design-system": "workspace:*",\n    "@company/react-hooks": "workspace:*"\n    // ...\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"syncversionmanagerconfig",children:(0,i.jsx)(n.code,{children:"syncVersionManagerConfig"})}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/NodeConfig#syncVersionManagerConfig"}),"\n",(0,i.jsxs)(n.p,{children:["Will sync the currently configured ",(0,i.jsx)(n.a,{href:"#version",children:"Node.js version"}),' to a 3rd-party version manager\'s\nconfig/rc file. Supports "nodenv" (syncs to ',(0,i.jsx)(n.code,{children:".node-version"}),'), "nvm" (syncs to ',(0,i.jsx)(n.code,{children:".nvmrc"}),"), or none\n(default)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2}',children:"node:\n  syncVersionManagerConfig: 'nvm'\n"})}),"\n",(0,i.jsx)(n.p,{children:"This is a special setting that ensure other Node.js processes outside of our toolchain are utilizing\nthe same version, which is a very common practice when managing dependencies."}),"\n",(0,i.jsx)(n.h2,{id:"typescript",children:(0,i.jsx)(n.code,{children:"typescript"})}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/ToolchainConfig#typescript"}),"\n",(0,i.jsx)(n.p,{children:"Dictates how moon interacts with and utilizes TypeScript within the workspace. This field is\noptional and is undefined by default. Define it to enable TypeScript support."}),"\n",(0,i.jsx)(n.h3,{id:"createmissingconfig",children:(0,i.jsx)(n.code,{children:"createMissingConfig"})}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/TypeScriptConfig#createMissingConfig"}),"\n",(0,i.jsxs)(n.p,{children:["When ",(0,i.jsx)(n.a,{href:"#syncprojectreferences",children:"syncing project references"})," and a depended on project ",(0,i.jsx)(n.em,{children:"does not"})," have\na ",(0,i.jsx)(n.code,{children:"tsconfig.json"}),", automatically create one. Defaults to ",(0,i.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2}',children:"typescript:\n  createMissingConfig: true\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"includeprojectreferencesources",children:[(0,i.jsx)(n.code,{children:"includeProjectReferenceSources"}),(0,i.jsx)(t.Z,{version:"1.17.0"})]}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/TypeScriptConfig#includeProjectReferenceSources"}),"\n",(0,i.jsxs)(n.p,{children:["When enabled and ",(0,i.jsx)(n.a,{href:"#syncprojectreferences",children:"syncing project references"}),", will inject each project\nreference as an entry in the ",(0,i.jsx)(n.code,{children:"include"})," field of the respective project's ",(0,i.jsx)(n.code,{children:"tsconfig.json"}),". These\nincludes are sometimes required by editors for auto-completion, intellisense, and automatic imports."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2}',children:"typescript:\n  includeProjectReferenceSources: true\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To demonstrate this, we'll use the example from ",(0,i.jsx)(n.a,{href:"#syncprojectreferences",children:(0,i.jsx)(n.code,{children:"syncProjectReferences"})}),".\nWhen this setting is enabled, the ",(0,i.jsx)(n.code,{children:"include"})," field will also be populated."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title="tsconfig.json"',children:'{\n  // ...\n  "include": ["../../design-system/**/*", "../../react-hooks/**/*"],\n  "references": [\n    // ...\n    { "path": "../../design-system" },\n    { "path": "../../react-hooks" }\n  ]\n}\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"includesharedtypes",children:[(0,i.jsx)(n.code,{children:"includeSharedTypes"}),(0,i.jsx)(t.Z,{version:"1.17.0"})]}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/TypeScriptConfig#includeSharedTypes"}),"\n",(0,i.jsxs)(n.p,{children:["When enabled, will automatically inject shared types (",(0,i.jsx)(n.code,{children:"types/**/*"}),") into the ",(0,i.jsx)(n.code,{children:"include"})," field of each\nproject's ",(0,i.jsx)(n.code,{children:"tsconfig.json"}),". The shared types folder ",(0,i.jsx)(n.em,{children:"must"})," be named ",(0,i.jsx)(n.code,{children:"types"})," and must exist relative\nto the ",(0,i.jsx)(n.a,{href:"#root",children:(0,i.jsx)(n.code,{children:"root"})})," setting. Defaults to ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2}',children:"typescript:\n  includeSharedTypes: true\n"})}),"\n",(0,i.jsxs)(n.p,{children:['As a demonstration, if we had a package located at "packages/components", the ',(0,i.jsx)(n.code,{children:"include"})," setting will\nbe appended with:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title="<project>/tsconfig.json"',children:'{\n  // ...\n  "include": ["../../types/**/*"]\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"projectconfigfilename",children:(0,i.jsx)(n.code,{children:"projectConfigFileName"})}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/TypeScriptConfig#projectConfigFileName"}),"\n",(0,i.jsxs)(n.p,{children:["Defines the file name of the ",(0,i.jsx)(n.code,{children:"tsconfig.json"})," found in the project root. We utilize this setting when\nsyncing project references between projects. Defaults to ",(0,i.jsx)(n.code,{children:"tsconfig.json"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2}',children:"typescript:\n  projectConfigFileName: 'tsconfig.build.json'\n"})}),"\n",(0,i.jsx)(n.h3,{id:"root",children:(0,i.jsx)(n.code,{children:"root"})}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/TypeScriptConfig#root"}),"\n",(0,i.jsxs)(n.p,{children:["Defines the TypeScript root (relative from moon's workspace root), where project reference\ncomposition, common compiler options, and shared types will be located. Defaults to ",(0,i.jsx)(n.code,{children:"."}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2}',children:"typescript:\n  root: './types'\n"})}),"\n",(0,i.jsx)(n.h3,{id:"rootconfigfilename",children:(0,i.jsx)(n.code,{children:"rootConfigFileName"})}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/TypeScriptConfig#rootConfigFileName"}),"\n",(0,i.jsxs)(n.p,{children:["Defines the file name of the ",(0,i.jsx)(n.code,{children:"tsconfig.json"})," found in the root of all projects. We utilize this\nsetting when syncing projects as references. Defaults to ",(0,i.jsx)(n.code,{children:"tsconfig.json"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2}',children:"typescript:\n  rootConfigFileName: 'tsconfig.projects.json'\n"})}),"\n",(0,i.jsx)(n.h3,{id:"rootoptionsconfigfilename",children:(0,i.jsx)(n.code,{children:"rootOptionsConfigFileName"})}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/TypeScriptConfig#rootOptionsConfigFileName"}),"\n",(0,i.jsxs)(n.p,{children:["Defines the file name of the config file found in the root that houses shared compiler options.\nDefaults to ",(0,i.jsx)(n.code,{children:"tsconfig.options.json"}),". This setting is used in the following scenarios:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["When ",(0,i.jsxs)(n.a,{href:"#",children:["creating a ",(0,i.jsx)(n.code,{children:"tsconfig.json"})," for a project"]}),", sets the ",(0,i.jsx)(n.code,{children:"extends"})," field to this value."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2}',children:"typescript:\n  rootOptionsConfigFileName: 'tsconfig.base.json'\n"})}),"\n",(0,i.jsx)(n.h3,{id:"routeoutdirtocache",children:(0,i.jsx)(n.code,{children:"routeOutDirToCache"})}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/TypeScriptConfig#routeOutDirToCache"}),"\n",(0,i.jsxs)(n.p,{children:["Updates the ",(0,i.jsx)(n.code,{children:"outDir"})," compiler option in each project's ",(0,i.jsx)(n.a,{href:"#projectconfigfilename",children:(0,i.jsx)(n.code,{children:"tsconfig.json"})})," to\nroute to moon's cache folder. This is useful when using project references and wanting to keep all\nthe compiled ",(0,i.jsx)(n.code,{children:".d.ts"})," files ",(0,i.jsx)(n.em,{children:"out"})," of the project folder. Defaults to ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2}',children:"typescript:\n  routeOutDirToCache: true\n"})}),"\n",(0,i.jsxs)(n.p,{children:['As a demonstration, if we had a package located at "packages/components", the ',(0,i.jsx)(n.code,{children:"outDir"})," compiler\noption will be re-routed to the following when syncing."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title="<project>/tsconfig.json"',children:'{\n  // ...\n  "compilerOptions": {\n    // ...\n    "outDir": "../../.moon/cache/types/packages/components"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"syncprojectreferences",children:(0,i.jsx)(n.code,{children:"syncProjectReferences"})}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/TypeScriptConfig#syncProjectReferences"}),"\n",(0,i.jsxs)(n.p,{children:["Will sync a project's ",(0,i.jsx)(n.a,{href:"../concepts/project#dependencies",children:"dependencies"})," (when applicable) as project\nreferences within that project's ",(0,i.jsx)(n.code,{children:"tsconfig.json"}),", and the root ",(0,i.jsx)(n.code,{children:"tsconfig.json"}),". Defaults to ",(0,i.jsx)(n.code,{children:"true"}),"\nwhen the parent ",(0,i.jsx)(n.code,{children:"typescript"})," setting is defined, otherwise ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2}',children:"typescript:\n  syncProjectReferences: true\n"})}),"\n",(0,i.jsx)(n.p,{children:"A quick example on how this works. Given the following dependencies:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title="moon.yml"',children:"dependsOn:\n  - 'designSystem'\n  - 'reactHooks'\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Would result in the following ",(0,i.jsx)(n.code,{children:"references"})," within both ",(0,i.jsx)(n.code,{children:"tsconfig.json"}),"s."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title="tsconfig.json"',children:'{\n  // ...\n  "references": [\n    // ...\n    { "path": "../../design-system" },\n    { "path": "../../react-hooks" }\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["This setting assumes you're using the file organization as defined in our official\n",(0,i.jsx)(n.a,{href:"../guides/javascript/typescript-project-refs",children:"TypeScript project references"})," in-depth guide."]})}),"\n",(0,i.jsx)(n.h3,{id:"syncprojectreferencestopaths",children:(0,i.jsx)(n.code,{children:"syncProjectReferencesToPaths"})}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/TypeScriptConfig#syncProjectReferencesToPaths"}),"\n",(0,i.jsxs)(n.p,{children:["Will sync a project's ",(0,i.jsx)(n.a,{href:"#projectconfigfilename",children:(0,i.jsx)(n.code,{children:"tsconfig.json"})})," project references to the ",(0,i.jsx)(n.code,{children:"paths"}),"\ncompiler option, using the referenced project's ",(0,i.jsx)(n.code,{children:"package.json"})," name. This is useful for mapping\naliases to their source code. Defaults to ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2}',children:"typescript:\n  syncProjectReferencesToPaths: true\n"})}),"\n",(0,i.jsxs)(n.p,{children:["As a demonstration, if we had a reference to a shared package with the name ",(0,i.jsx)(n.code,{children:"@brand/components"}),", the\n",(0,i.jsx)(n.code,{children:"paths"})," compiler option would be updated to the following when syncing."]}),"\n",(0,i.jsxs)(n.p,{children:["If an index file exists, we'll map a default import. Otherwise, we'll always map a wildcard import.\nBoth imports can optionally be nested within a ",(0,i.jsx)(n.code,{children:"src"})," directory."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title="<project>/tsconfig.json"',children:'{\n  // ...\n  "compilerOptions": {\n    // ...\n    "paths": {\n      "@brand/components": ["../shared/components/src/index.ts"],\n      "@brand/components/*": ["../shared/components/src/*"]\n    }\n  },\n  "references": [\n    {\n      "path": "../shared/components"\n    }\n  ]\n}\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["This setting runs ",(0,i.jsx)(n.em,{children:"after"})," ",(0,i.jsx)(n.a,{href:"#syncprojectreferences",children:(0,i.jsx)(n.code,{children:"syncProjectReferences"})})," and will inherit any\nsynced references from that setting."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"rust",children:"Rust"}),"\n",(0,i.jsxs)(n.h2,{id:"rust-1",children:[(0,i.jsx)(n.code,{children:"rust"}),(0,i.jsx)(t.Z,{version:"1.5.0"})]}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/ToolchainConfig#rust"}),"\n",(0,i.jsxs)(n.p,{children:["Enables and configures ",(0,i.jsx)(n.a,{href:"../guides/rust/handbook",children:"Rust"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"version-4",children:(0,i.jsx)(n.code,{children:"version"})}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/RustConfig#version"}),"\n",(0,i.jsxs)(n.p,{children:["Defines the explicit Rust toolchain\n",(0,i.jsx)(n.a,{href:"../concepts/toolchain#version-specification",children:"version/channel specification"})," to use. If this field\nis ",(0,i.jsx)(n.em,{children:"not defined"}),", the global ",(0,i.jsx)(n.code,{children:"cargo"}),", ",(0,i.jsx)(n.code,{children:"rustc"}),", and other binaries will be used."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2}',children:"rust:\n  version: '1.69.0'\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Version can also be defined with ",(0,i.jsx)(n.a,{href:"../proto/config",children:(0,i.jsx)(n.code,{children:".prototools"})}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"bins-1",children:[(0,i.jsx)(n.code,{children:"bins"}),(0,i.jsx)(t.Z,{version:"1.10.0",updated:!0})]}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/RustConfig#bins"}),"\n",(0,i.jsxs)(n.p,{children:["A list of binaries (with optional versions) to install into Cargo (",(0,i.jsx)(n.code,{children:"~/.cargo/bin"}),"), and make them\navailable to the ",(0,i.jsx)(n.code,{children:"cargo"})," command. Binaries will be installed with\n",(0,i.jsx)(n.a,{href:"https://crates.io/crates/cargo-binstall",children:(0,i.jsx)(n.code,{children:"cargo-binstall"})})," in an effort to reduce build and\ncompilation times."]}),"\n",(0,i.jsx)(n.p,{children:"This setting requires a list of package names or binary configuration objects with the following\nfields:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"bin"})," (required) - Name of the binary."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"local"})," - Only install the binary locally, and not in CI."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"force"})," - Force install the binary. This ",(0,i.jsx)(n.em,{children:"should"})," be toggled for one-offs."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2-5}',children:"rust:\n  bins:\n    - 'cargo-nextest@0.9.52'\n    - bin: 'cargo-nextest'\n      local: true\n"})}),"\n",(0,i.jsx)(n.p,{children:"Binaries that have been installed into Cargo can be referenced from task commands:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title="<project>/moon.yml"',children:"tasks:\n  test:\n    command: 'nextest run --workspace'\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"components",children:[(0,i.jsx)(n.code,{children:"components"}),(0,i.jsx)(t.Z,{version:"1.16.0"})]}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/RustConfig#components"}),"\n",(0,i.jsxs)(n.p,{children:["A list of additional ",(0,i.jsx)(n.a,{href:"https://rust-lang.github.io/rustup/concepts/components.html",children:"components"})," to\nautomatically install with ",(0,i.jsx)(n.code,{children:"rustup"})," for the current toolchain. Will be installed when the pipeline\nis first ran, and subsequently when configuration changes."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2-4}',children:"rust:\n  components:\n    - 'rust-docs'\n    - 'rust-analyzer'\n"})}),"\n",(0,i.jsx)(n.h3,{id:"synctoolchainconfig",children:(0,i.jsx)(n.code,{children:"syncToolchainConfig"})}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/RustConfig#syncToolchainConfig"}),"\n",(0,i.jsxs)(n.p,{children:["Will automatically sync the currently configured ",(0,i.jsxs)(n.a,{href:"#version-2",children:["Rust ",(0,i.jsx)(n.code,{children:"version"})]})," to the\n",(0,i.jsx)(n.code,{children:"toolchain.channel"})," field in ",(0,i.jsx)(n.code,{children:"rust-toolchain.toml"}),", relative to the root ",(0,i.jsx)(n.code,{children:"Cargo.lock"}),". If the file\ndoes not exist, it will be created."]}),"\n",(0,i.jsx)(n.p,{children:"This is a special setting that ensures other Rust/Cargo processes outside of our toolchain are\nutilizing the same version, which is a very common practice."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2,3}',children:"rust:\n  version: '1.69.0'\n  syncToolchainConfig: true\n"})}),"\n",(0,i.jsx)(n.p,{children:"To demonstrate this, the settings above would sync the following file:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'title="rust-toolchain.toml"',children:'[toolchain]\nchannel = "1.69.0"\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"targets",children:[(0,i.jsx)(n.code,{children:"targets"}),(0,i.jsx)(t.Z,{version:"1.16.0"})]}),"\n",(0,i.jsx)(r.Z,{to:"/api/types/interface/RustConfig#targets"}),"\n",(0,i.jsxs)(n.p,{children:["A list of additional ",(0,i.jsx)(n.a,{href:"https://rust-lang.github.io/rustup/cross-compilation.html",children:"targets"})," to\nautomatically install with ",(0,i.jsx)(n.code,{children:"rustup"})," for the current toolchain. Will be installed when the pipeline\nis first ran, and subsequently when configuration changes."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2-4}',children:"rust:\n  targets:\n    - 'aarch64-unknown-linux-gnu'\n    - 'wasm32-wasi'\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Targets are currently ",(0,i.jsx)(n.em,{children:"not scoped"})," based on operating system, and will be installed for all\nmachines."]}),"\n"]})]})}function j(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},39798:(e,n,s)=>{s.d(n,{Z:()=>t});s(27378);var i=s(40624);const o={tabItem:"tabItem_wHwb"};var r=s(24246);function t(e){let{children:n,hidden:s,className:t}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,i.Z)(o.tabItem,t),hidden:s,children:n})}},33337:(e,n,s)=>{s.d(n,{Z:()=>j});var i=s(27378),o=s(40624),r=s(83457),t=s(35595),c=s(76457);const l={tabList:"tabList_J5MA",tabItem:"tabItem_l0OV"};var a=s(24246);function d(e){let{className:n,block:s,selectedValue:i,selectValue:t,tabValues:c}=e;const d=[],{blockElementScrollPositionUntilNextRender:h}=(0,r.o5)(),p=e=>{const n=e.currentTarget,s=d.indexOf(n),o=c[s].value;o!==i&&(h(n),t(o))},j=e=>{let n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const s=d.indexOf(e.currentTarget)+1;n=d[s]??d[0];break}case"ArrowLeft":{const s=d.indexOf(e.currentTarget)-1;n=d[s]??d[d.length-1];break}}n?.focus()};return(0,a.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":s},n),children:c.map((e=>{let{value:n,label:s,attributes:r}=e;return(0,a.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>d.push(e),onKeyDown:j,onClick:p,...r,className:(0,o.Z)("tabs__item",l.tabItem,r?.className,{"tabs__item--active":i===n}),children:s??n},n)}))})}function h(e){let{lazy:n,children:s,selectedValue:o}=e;const r=(Array.isArray(s)?s:[s]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===o));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return(0,a.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==o})))})}function p(e){const n=(0,t.Y)(e);return(0,a.jsxs)("div",{className:(0,o.Z)("tabs-container",l.tabList),children:[(0,a.jsx)(d,{...n,...e}),(0,a.jsx)(h,{...n,...e})]})}function j(e){const n=(0,c.Z)();return(0,a.jsx)(p,{...e,children:(0,t.h)(e.children)},String(n))}},35595:(e,n,s)=>{s.d(n,{Y:()=>j,h:()=>a});var i=s(27378),o=s(3620),r=s(9834),t=s(30654),c=s(70784),l=s(71819);function a(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:n,children:s}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return a(e).map((e=>{let{props:{value:n,label:s,attributes:i,default:o}}=e;return{value:n,label:s,attributes:i,default:o}}))}(s);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,s])}function h(e){let{value:n,tabValues:s}=e;return s.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:s}=e;const r=(0,o.k6)(),c=function(e){let{queryString:n=!1,groupId:s}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!s)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return s??null}({queryString:n,groupId:s});return[(0,t._X)(c),(0,i.useCallback)((e=>{if(!c)return;const n=new URLSearchParams(r.location.search);n.set(c,e),r.replace({...r.location,search:n.toString()})}),[c,r])]}function j(e){const{defaultValue:n,queryString:s=!1,groupId:o}=e,t=d(e),[c,a]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:s}=e;if(0===s.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:s}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${s.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=s.find((e=>e.default))??s[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:t}))),[j,u]=p({queryString:s,groupId:o}),[x,m]=function(e){let{groupId:n}=e;const s=function(e){return e?`docusaurus.tab.${e}`:null}(n),[o,r]=(0,l.Nk)(s);return[o,(0,i.useCallback)((e=>{s&&r.set(e)}),[s,r])]}({groupId:o}),f=(()=>{const e=j??x;return h({value:e,tabValues:t})?e:null})();(0,r.Z)((()=>{f&&a(f)}),[f]);return{selectedValue:c,selectValue:(0,i.useCallback)((e=>{if(!h({value:e,tabValues:t}))throw new Error(`Can't select invalid tab value=${e}`);a(e),u(e),m(e)}),[u,m,t]),tabValues:t}}},32189:(e,n,s)=>{s.d(n,{Z:()=>t});var i=s(83469),o=s(31792),r=s(24246);function t(e){let{to:n}=e;return(0,r.jsx)("a",{href:n,target:"_blank",className:"float-right inline-block",style:{marginTop:"-3em"},children:(0,r.jsx)(o.Z,{icon:i.dT$})})}},9785:(e,n,s)=>{s.d(n,{Z:()=>r});var i=s(9619),o=s(24246);function r(e){let{text:n="Required"}=e;return(0,o.jsx)(i.Z,{text:n,variant:"failure",className:"ml-2"})}},79022:(e,n,s)=>{s.d(n,{Z:()=>r});var i=s(9619),o=s(24246);function r(e){let{header:n,inline:s,updated:r,version:t}=e;return(0,o.jsx)(i.Z,{text:`v${t}`,variant:r?"success":"info",className:n?"absolute right-0 top-1.5":s?"inline-block":"ml-2"})}},9619:(e,n,s)=>{s.d(n,{Z:()=>c});var i=s(40624),o=s(31792),r=s(24246);const t={failure:"bg-red-100 text-red-900",info:"bg-pink-100 text-pink-900",success:"bg-green-100 text-green-900",warning:"bg-orange-100 text-orange-900"};function c(e){let{className:n,icon:s,text:c,variant:l}=e;return(0,r.jsxs)("span",{className:(0,i.Z)("inline-flex items-center px-1 py-0.5 rounded text-xs font-bold uppercase",l?t[l]:"bg-gray-100 text-gray-800",n),children:[s&&(0,r.jsx)(o.Z,{icon:s,className:"mr-1"}),c]})}},71670:(e,n,s)=>{s.d(n,{Z:()=>c,a:()=>t});var i=s(27378);const o={},r=i.createContext(o);function t(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);