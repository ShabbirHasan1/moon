"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[29631],{45098:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>g,contentTitle:()=>h,default:()=>x,frontMatter:()=>p,metadata:()=>u,toc:()=>j});var s=a(24246),i=a(71670),r=a(33337),o=a(39798);function t(e){const n={a:"a",code:"code",li:"li",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(r.Z,{groupId:"package-manager",defaultValue:"yarn",values:[{label:"npm",value:"npm"},{label:"pnpm",value:"pnpm"},{label:"Yarn",value:"yarn"},{label:"Yarn (classic)",value:"yarn1"}],children:[(0,s.jsxs)(o.Z,{value:"yarn",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'{\n  // ...\n  "workspaces": ["apps/*", "packages/*"]\n}\n'})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title=".yarnrc.yml"',children:"# ...\nnodeLinker: 'node-modules'\n"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://yarnpkg.com/features/workspaces",children:"Documentation"})}),"\n"]})]}),(0,s.jsxs)(o.Z,{value:"yarn1",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'{\n  // ...\n  "workspaces": ["apps/*", "packages/*"]\n}\n'})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://classic.yarnpkg.com/en/docs/workspaces",children:"Documentation"})}),"\n"]})]}),(0,s.jsxs)(o.Z,{value:"npm",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'{\n  // ...\n  "workspaces": ["apps/*", "packages/*"]\n}\n'})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.npmjs.com/cli/v8/using-npm/workspaces",children:"Documentation"})}),"\n"]})]}),(0,s.jsxs)(o.Z,{value:"pnpm",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="pnpm-workspace.yaml"',children:"packages:\n  - 'apps/*'\n  - 'packages/*'\n"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://pnpm.io/workspaces",children:"Documentation"})}),"\n"]})]})]})}function l(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}function c(e){const n={code:"code",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,s.jsxs)(r.Z,{groupId:"package-manager",defaultValue:"yarn",values:[{label:"npm",value:"npm"},{label:"pnpm",value:"pnpm"},{label:"Yarn",value:"yarn"},{label:"Yarn (classic)",value:"yarn1"}],children:[(0,s.jsxs)(o.Z,{value:"npm",children:[(0,s.jsx)(n.p,{children:"Install dependencies:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"npm install\n"})}),(0,s.jsx)(n.p,{children:"Add a package:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"# At the root\nnpm install <dependency>\n\n# In a project\nnpm install <dependency> --workspace <project>\n"})}),(0,s.jsx)(n.p,{children:"Remove a package:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"# At the root\nnpm install <dependency>\n\n# In a project\nnpm install <dependency> --workspace <project>\n"})}),(0,s.jsx)(n.p,{children:"Update packages:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"npx npm-check-updates --interactive\n"})})]}),(0,s.jsxs)(o.Z,{value:"pnpm",children:[(0,s.jsx)(n.p,{children:"Install dependencies:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"pnpm install\n"})}),(0,s.jsx)(n.p,{children:"Add a package:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"# At the root\npnpm add <dependency>\n\n# In a project\npnpm add <dependency> --filter <project>\n"})}),(0,s.jsx)(n.p,{children:"Remove a package:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"# At the root\npnpm remove <dependency>\n\n# In a project\npnpm remove <dependency> --filter <project>\n"})}),(0,s.jsx)(n.p,{children:"Update packages:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"pnpm update -i -r --latest\n"})})]}),(0,s.jsxs)(o.Z,{value:"yarn",children:[(0,s.jsx)(n.p,{children:"Install dependencies:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"yarn install\n"})}),(0,s.jsx)(n.p,{children:"Add a package:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"# At the root\nyarn add <dependency>\n\n# In a project\nyarn workspace <project> add <dependency>\n"})}),(0,s.jsx)(n.p,{children:"Remove a package:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"# At the root\nyarn remove <dependency>\n\n# In a project\nyarn workspace <project> remove <dependency>\n"})}),(0,s.jsx)(n.p,{children:"Update packages:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"yarn upgrade-interactive\n"})})]}),(0,s.jsxs)(o.Z,{value:"yarn1",children:[(0,s.jsx)(n.p,{children:"Install dependencies:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"yarn install\n"})}),(0,s.jsx)(n.p,{children:"Add a package:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"# At the root\nyarn add <dependency> -w\n\n# In a project\nyarn workspace <project> add <dependency>\n"})}),(0,s.jsx)(n.p,{children:"Remove a package:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"# At the root\nyarn remove <dependency> -w\n\n# In a project\nyarn workspace <project> remove <dependency>\n"})}),(0,s.jsx)(n.p,{children:"Update packages:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"yarn upgrade-interactive --latest\n"})})]})]})}function d(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}const p={title:"Node.js handbook",toc_max_heading_level:6},h=void 0,u={id:"guides/javascript/node-handbook",title:"Node.js handbook",description:"Utilizing JavaScript (and TypeScript) in a monorepo can be a daunting task, especially when using",source:"@site/docs/guides/javascript/node-handbook.mdx",sourceDirName:"guides/javascript",slug:"/guides/javascript/node-handbook",permalink:"/docs/guides/javascript/node-handbook",draft:!1,unlisted:!1,editUrl:"https://github.com/moonrepo/moon/tree/master/website/docs/guides/javascript/node-handbook.mdx",tags:[],version:"current",frontMatter:{title:"Node.js handbook",toc_max_heading_level:6},sidebar:"guides",previous:{title:"Deno handbook",permalink:"/docs/guides/javascript/deno-handbook"},next:{title:"Task profiling",permalink:"/docs/guides/profile"}},g={},j=[{value:"moon setup",id:"moon-setup",level:2},{value:"Enabling the language",id:"enabling-the-language",level:3},{value:"Utilizing the toolchain",id:"utilizing-the-toolchain",level:3},{value:"Using <code>package.json</code> scripts",id:"using-packagejson-scripts",level:3},{value:"Repository structure",id:"repository-structure",level:2},{value:"Applications",id:"applications",level:3},{value:"Packages",id:"packages",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Dependency management",id:"dependency-management",level:2},{value:"Workspace commands",id:"workspace-commands",level:3},{value:"Developer tools at the root",id:"developer-tools-at-the-root",level:3},{value:"Product libraries in a project",id:"product-libraries-in-a-project",level:3},{value:"Code sharing",id:"code-sharing",level:2},{value:"Depending on packages",id:"depending-on-packages",level:3},{value:"Types of packages",id:"types-of-packages",level:3},{value:"Local only",id:"local-only",level:4},{value:"Internally published",id:"internally-published",level:4},{value:"Externally published",id:"externally-published",level:4},{value:"Bundler integration",id:"bundler-integration",level:3},{value:"TypeScript integration",id:"typescript-integration",level:3}];function m(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Utilizing JavaScript (and TypeScript) in a monorepo can be a daunting task, especially when using\nNode.js, as there are many ways to structure your code and to configure your tools. With this\nhandbook, we'll help guide you through this process."}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"This guide is a living document and will continue to be updated over time!"})}),"\n",(0,s.jsx)(n.h2,{id:"moon-setup",children:"moon setup"}),"\n",(0,s.jsxs)(n.p,{children:["For this part of the handbook, we'll be focusing on ",(0,s.jsx)(n.a,{href:"/moon",children:"moon"}),", our task runner. To start,\nlanguages in moon act like plugins, where their functionality and support ",(0,s.jsx)(n.em,{children:"is not"})," enabled unless\nexplicitly configured. We follow this approach to avoid unnecessary overhead."]}),"\n",(0,s.jsx)(n.h3,{id:"enabling-the-language",children:"Enabling the language"}),"\n",(0,s.jsxs)(n.p,{children:["To enable JavaScript support via Node.js, define the ",(0,s.jsx)(n.a,{href:"../../config/toolchain#node",children:(0,s.jsx)(n.code,{children:"node"})})," setting\nin ",(0,s.jsx)(n.a,{href:"../../config/toolchain",children:(0,s.jsx)(n.code,{children:".moon/toolchain.yml"})}),", even if an empty object."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml"',children:"# Enable Node.js\nnode: {}\n\n# Enable Node.js and override default settings\nnode:\n  packageManager: 'pnpm'\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Or by pinning a ",(0,s.jsx)(n.code,{children:"node"})," version in ",(0,s.jsx)(n.a,{href:"../../proto/config",children:(0,s.jsx)(n.code,{children:".prototools"})})," in the workspace root."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'title=".prototools"',children:'node = "18.0.0"\npnpm = "7.29.0"\n'})}),"\n",(0,s.jsx)(n.p,{children:"This will enable the Node.js platform and provide the following automations around its ecosystem:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Node modules will automatically be installed if dependencies in ",(0,s.jsx)(n.code,{children:"package.json"})," have changed, or\nthe lockfile has changed, since the last time a task has ran.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["We'll also take ",(0,s.jsx)(n.code,{children:"package.json"})," workspaces into account and install modules in the correct\nlocation; either the workspace root, in a project, or both."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Relationships between projects will automatically be discovered based on ",(0,s.jsx)(n.code,{children:"dependencies"}),",\n",(0,s.jsx)(n.code,{children:"devDependencies"}),", and ",(0,s.jsx)(n.code,{children:"peerDependencies"})," in ",(0,s.jsx)(n.code,{children:"package.json"}),".","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The versions of these packages will also be automatically synced when changed."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Tasks can be ",(0,s.jsx)(n.a,{href:"../../config/toolchain#infertasksfromscripts",children:"automatically inferred"})," from\n",(0,s.jsx)(n.code,{children:"package.json"})," scripts."]}),"\n",(0,s.jsx)(n.li,{children:"And much more!"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"utilizing-the-toolchain",children:"Utilizing the toolchain"}),"\n",(0,s.jsxs)(n.p,{children:["When a language is enabled, moon by default will assume that the language's binary is available\nwithin the current environment (typically on ",(0,s.jsx)(n.code,{children:"PATH"}),"). This has the downside of requiring all\ndevelopers and machines to manually install the correct version of the language, ",(0,s.jsx)(n.em,{children:"and to stay in\nsync"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Instead, you can utilize ",(0,s.jsx)(n.a,{href:"../../concepts/toolchain",children:"moon's toolchain"}),", which will download and\ninstall the language in the background, and ensure every task is executed using the exact version\nacross all machines."]}),"\n",(0,s.jsxs)(n.p,{children:["Enabling the toolchain is as simple as defining the ",(0,s.jsx)(n.a,{href:"../../config/toolchain#version",children:(0,s.jsx)(n.code,{children:"node.version"})}),"\nsetting."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml"',children:"# Enable Node.js toolchain with an explicit version\nnode:\n  version: '18.0.0'\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Versions can also be defined with ",(0,s.jsx)(n.a,{href:"../../proto/config",children:(0,s.jsx)(n.code,{children:".prototools"})}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"using-packagejson-scripts",children:["Using ",(0,s.jsx)(n.code,{children:"package.json"})," scripts"]}),"\n",(0,s.jsxs)(n.p,{children:["If you're looking to prototype moon, or reduce the migration effort to moon tasks, you can configure\nmoon to inherit ",(0,s.jsx)(n.code,{children:"package.json"})," scripts, and internally convert them to moon tasks. This can be\nachieved with the ",(0,s.jsx)(n.a,{href:"../../config/toolchain#infertasksfromscripts",children:(0,s.jsx)(n.code,{children:"node.inferTasksFromScripts"})}),"\nsetting."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml"',children:"node:\n  inferTasksFromScripts: true\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Or you can run scripts through ",(0,s.jsx)(n.code,{children:"npm run"})," (or ",(0,s.jsx)(n.code,{children:"pnpm"}),", ",(0,s.jsx)(n.code,{children:"yarn"}),") calls."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="moon.yml"',children:"tasks:\n  build:\n    command: 'npm run build'\n"})}),"\n",(0,s.jsx)(n.h2,{id:"repository-structure",children:"Repository structure"}),"\n",(0,s.jsxs)(n.p,{children:["JavaScript monorepo's work best when projects are split into applications and packages, with each\nproject containing its own ",(0,s.jsx)(n.code,{children:"package.json"})," and dependencies. A root ",(0,s.jsx)(n.code,{children:"package.json"})," must also exist\nthat pieces all projects together through workspaces."]}),"\n",(0,s.jsx)(n.p,{children:"For small repositories, the following structure typically works well:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"/\n\u251c\u2500\u2500 .moon/\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 apps/\n\u2502   \u251c\u2500\u2500 client/\n|   |   \u251c\u2500\u2500 ...\n\u2502   |   \u2514\u2500\u2500 package.json\n\u2502   \u2514\u2500\u2500 server/\n|       \u251c\u2500\u2500 ...\n\u2502       \u2514\u2500\u2500 package.json\n\u2514\u2500\u2500 packages/\n    \u251c\u2500\u2500 components/\n    |   \u251c\u2500\u2500 ...\n    \u2502   \u2514\u2500\u2500 package.json\n    \u251c\u2500\u2500 theme/\n    |   \u251c\u2500\u2500 ...\n    \u2502   \u2514\u2500\u2500 package.json\n    \u2514\u2500\u2500 utils/\n        \u251c\u2500\u2500 ...\n        \u2514\u2500\u2500 package.json\n"})}),"\n",(0,s.jsx)(n.p,{children:"For large repositories, grouping projects by team or department helps with ownership and\norganization. With this structure, applications and libraries can be nested at any depth."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"/\n\u251c\u2500\u2500 .moon/\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 infra/\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 internal/\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 payments/\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 shared/\n    \u2514\u2500\u2500 ...\n"})}),"\n",(0,s.jsx)(n.h3,{id:"applications",children:"Applications"}),"\n",(0,s.jsxs)(n.p,{children:["Applications are runnable or executable, like an HTTP server, and are pieced together with packages\nand its own encapsulated code. They represent the whole, while packages are the pieces. Applications\ncan import and depend on packages, but they ",(0,s.jsx)(n.em,{children:"must not"})," import and depend on other applications."]}),"\n",(0,s.jsxs)(n.p,{children:["In moon, you can denote a project as an application using the ",(0,s.jsx)(n.a,{href:"../../config/project#type",children:(0,s.jsx)(n.code,{children:"type"})}),"\nsetting in ",(0,s.jsx)(n.a,{href:"../../config/project",children:(0,s.jsx)(n.code,{children:"moon.yml"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="moon.yml"',children:"type: 'application'\n"})}),"\n",(0,s.jsx)(n.h3,{id:"packages",children:"Packages"}),"\n",(0,s.jsxs)(n.p,{children:["Packages (also known as a libraries) are self-contained reusable pieces of code, and are the\nsuggested pattern for ",(0,s.jsx)(n.a,{href:"#code-sharing",children:"code sharing"}),". Packages can import and depend on other\npackages, but they ",(0,s.jsx)(n.em,{children:"must not"})," import and depend on applications!"]}),"\n",(0,s.jsxs)(n.p,{children:["In moon, you can denote a project as a library using the ",(0,s.jsx)(n.a,{href:"../../config/project#type",children:(0,s.jsx)(n.code,{children:"type"})})," setting\nin ",(0,s.jsx)(n.a,{href:"../../config/project",children:(0,s.jsx)(n.code,{children:"moon.yml"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="moon.yml"',children:"type: 'library'\n"})}),"\n",(0,s.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(n.p,{children:"Every tool that you'll utilize in a repository will have its own configuration file. This will be a\nlot of config files, but regardless of what tool it is, where the config file should go will fall\ninto 1 of these categories:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Settings are inherited by all projects."})," These are known as universal tools, and enforce code\nconsistency and quality across the entire repository. Their config file must exist in the\nrepository root, but may support overrides in each project.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Examples: Babel, ",(0,s.jsx)(n.a,{href:"../examples/eslint",children:"ESLint"}),", ",(0,s.jsx)(n.a,{href:"../examples/prettier",children:"Prettier"}),",\n",(0,s.jsx)(n.a,{href:"../examples/typescript",children:"TypeScript"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Settings are unique per project."})," These are developers tools that must be configured separately\nfor each project, as they'll have different concerns. Their config file must exist in each\nproject, but a shared configuration may exist as a base (for example, Jest presets).","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Examples: ",(0,s.jsx)(n.a,{href:"../examples/jest",children:"Jest"}),", ",(0,s.jsx)(n.a,{href:"../examples/typescript",children:"TypeScript"})," (with project\nreferences)"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Settings are one-offs."})," These are typically for applications or tools that require their own\nconfig, but aren't prevalent throughout the entire repository.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Examples: ",(0,s.jsx)(n.a,{href:"../examples/astro",children:"Astro"}),", ",(0,s.jsx)(n.a,{href:"../examples/next",children:"Next"}),", ",(0,s.jsx)(n.a,{href:"../examples/nuxt",children:"Nuxt"}),",\n",(0,s.jsx)(n.a,{href:"../examples/remix",children:"Remix"}),", Tailwind"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"dependency-management",children:"Dependency management"}),"\n",(0,s.jsx)(n.p,{children:"Dependencies, also known as node modules, are required by all projects, and are installed through a\npackage manager like npm, pnpm, or yarn. It doesn't matter which package manager you choose, but we\nhighly suggest choosing one that has proper workspaces support. If you're unfamiliar with\nworkspaces, they will:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Resolve all ",(0,s.jsx)(n.code,{children:"package.json"}),"'s in a repository using glob patterns."]}),"\n",(0,s.jsxs)(n.li,{children:["Install dependencies from all ",(0,s.jsx)(n.code,{children:"package.json"}),"'s at once, in the required locations."]}),"\n",(0,s.jsxs)(n.li,{children:["Create symlinks of local packages in ",(0,s.jsx)(n.code,{children:"node_modules"})," (to emulate an installed package)."]}),"\n",(0,s.jsxs)(n.li,{children:["Deduplicate and hoist ",(0,s.jsx)(n.code,{children:"node_modules"})," when applicable."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"All of this functionality enables robust monorepo support, and can be enabled with the following:"}),"\n","\n",(0,s.jsx)(l,{}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsx)(n.p,{children:"Package workspaces are not a requirement for monorepos, but they do solve an array of problems\naround module resolution, avoiding duplicate packages in bundles, and general interoperability.\nProceed with caution for non-workspaces setups!"})}),"\n",(0,s.jsx)(n.h3,{id:"workspace-commands",children:"Workspace commands"}),"\n",(0,s.jsx)(n.p,{children:"The following common commands can be used for adding, removing, or managing dependencies in a\nworkspace. View the package manager's official documentation for a thorough list of commands."}),"\n","\n",(0,s.jsx)(d,{}),"\n",(0,s.jsx)(n.h3,{id:"developer-tools-at-the-root",children:"Developer tools at the root"}),"\n",(0,s.jsxs)(n.p,{children:["While not a strict guideline to follow, we've found that installing universal developer tool related\ndependencies (Babel, ESLint, Jest, TypeScript, etc) in the root ",(0,s.jsx)(n.code,{children:"package.json"})," as ",(0,s.jsx)(n.code,{children:"devDependencies"}),"\nto be a good pattern for consistency, quality, and the health of the repository. It provides the\nfollowing benefits:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"It ensures all projects are utilizing the same version (and sometimes configuration) of a tool."}),"\n",(0,s.jsx)(n.li,{children:"It allows the tool to easily be upgraded. Upgrade once, applied everywhere."}),"\n",(0,s.jsx)(n.li,{children:"It avoids conflicting or outdated versions of the same package."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["With that being said, this ",(0,s.jsx)(n.em,{children:"does not"})," include development dependencies that are unique to a project!"]}),"\n",(0,s.jsx)(n.h3,{id:"product-libraries-in-a-project",children:"Product libraries in a project"}),"\n",(0,s.jsxs)(n.p,{children:["Product, application, and or framework specific packages should be installed as production\n",(0,s.jsx)(n.code,{children:"dependencies"})," in a project's ",(0,s.jsx)(n.code,{children:"package.json"}),". We've found this pattern to work well for the\nfollowing reasons:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Application dependencies are pinned per project, avoiding accidental regressions."}),"\n",(0,s.jsx)(n.li,{children:"Applications can upgrade their dependencies and avoid breaking neighbor applications."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"code-sharing",children:"Code sharing"}),"\n",(0,s.jsx)(n.p,{children:'One of the primary reasons to use a monorepo is to easily share code between projects. When code is\nco-located within the same repository, it avoids the overhead of the "build -> version -> publish to\nregistry -> upgrade in consumer" workflow (when the code is located in an external repository).'}),"\n",(0,s.jsx)(n.p,{children:"Co-locating code also provides the benefit of fast iteration, fast adoption, and easier migration\n(when making breaking changes for example)."}),"\n",(0,s.jsxs)(n.p,{children:["With ",(0,s.jsx)(n.a,{href:"#dependency-management",children:"package workspaces"}),", code sharing is a breeze. As mentioned above,\nevery project that contains a ",(0,s.jsx)(n.code,{children:"package.json"})," that is part of the workspace, will be symlinked into\n",(0,s.jsx)(n.code,{children:"node_modules"}),". Because of this, these packages can easily be imported using their ",(0,s.jsx)(n.code,{children:"package.json"}),"\nname."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Imports from /packages/utils/package.json\nimport utils from '@company/utils';\n"})}),"\n",(0,s.jsx)(n.h3,{id:"depending-on-packages",children:"Depending on packages"}),"\n",(0,s.jsxs)(n.p,{children:["Because packages are symlinked into ",(0,s.jsx)(n.code,{children:"node_modules"}),", we can depend on them as if they were normal npm\npackages, but with 1 key difference. Since these packages aren't published, they do not have a\nversion to reference, and instead, we can use the special ",(0,s.jsx)(n.code,{children:"workspace:^"})," version (yarn and pnpm only,\nuse ",(0,s.jsx)(n.code,{children:"*"})," for npm)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "name": "@company/consumer",\n  "dependencies": {\n    "@company/provider": "workspace:^"\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"workspace:"}),' version basically means "use the package found in the current workspace". The ',(0,s.jsx)(n.code,{children:":^"}),"\ndetermines the version range to ",(0,s.jsx)(n.em,{children:"substitute with when publishing"}),". For example, the ",(0,s.jsx)(n.code,{children:"workspace:^"}),"\nabove would be replaced with version of ",(0,s.jsx)(n.code,{children:"@company/provider"})," as ",(0,s.jsx)(n.code,{children:"^<version>"})," when the\n",(0,s.jsx)(n.code,{children:"@company/consumer"})," package is published."]}),"\n",(0,s.jsxs)(n.p,{children:["There's also ",(0,s.jsx)(n.code,{children:"workspace:~"})," and ",(0,s.jsx)(n.code,{children:"workspace:*"})," which substitutes to ",(0,s.jsx)(n.code,{children:"~<version>"})," and ",(0,s.jsx)(n.code,{children:"<version>"}),"\nrespectively. We suggest using ",(0,s.jsx)(n.code,{children:":^"})," so that version ranges can be deduped."]}),"\n",(0,s.jsx)(n.h3,{id:"types-of-packages",children:"Types of packages"}),"\n",(0,s.jsx)(n.p,{children:"When sharing packages in a monorepo, there's typically 3 different kinds of packages:"}),"\n",(0,s.jsx)(n.h4,{id:"local-only",children:"Local only"}),"\n",(0,s.jsxs)(n.p,{children:["A local only package is just that, it's only available locally to the repository and ",(0,s.jsx)(n.em,{children:"is not"}),"\npublished to a registry, and ",(0,s.jsx)(n.em,{children:"is not"})," available to external repositories. For teams and companies\nthat utilize a single repository, this will be the most common type of package."]}),"\n",(0,s.jsxs)(n.p,{children:["A benefit of local packages is that they do not require a build step, as source files can be\nimported directly (",(0,s.jsx)(n.a,{href:"#bundler-integration",children:"when configured correctly"}),"). This avoids a lot of\n",(0,s.jsx)(n.code,{children:"package.json"})," overhead, especially in regards to ",(0,s.jsx)(n.code,{children:"exports"}),", ",(0,s.jsx)(n.code,{children:"imports"}),", and other import patterns."]}),"\n",(0,s.jsx)(n.h4,{id:"internally-published",children:"Internally published"}),"\n",(0,s.jsxs)(n.p,{children:["An internal package is published to a private registry, and ",(0,s.jsx)(n.em,{children:"is not"})," available to the public.\nPublished packages are far more strict than local packages, as the ",(0,s.jsx)(n.code,{children:"package.json"})," structure plays a\nmuch larger role for downstream consumers, as it dictates how files are imported, where they can be\nfound, what type of formats are supported (CJS, ESM), so on and so forth."]}),"\n",(0,s.jsxs)(n.p,{children:["Published packages require a build step, for both source code and TypeScript types (when\napplicable). We suggest using ",(0,s.jsx)(n.a,{href:"https://esbuild.github.io/",children:"esbuild"})," or\n",(0,s.jsx)(n.a,{href:"../examples/packemon",children:"Packemon"})," to handle this entire flow. With that being said, local projects\ncan still ",(0,s.jsx)(n.a,{href:"#bundler-integration",children:"import their source files"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"externally-published",children:"Externally published"}),"\n",(0,s.jsx)(n.p,{children:"An external package is structured similarly to an internal package, but instead of publishing to a\nprivate registry, it's published to the npm public registry."}),"\n",(0,s.jsx)(n.p,{children:"External packages are primarily for open source projects, and require the repository to also be\npublic."}),"\n",(0,s.jsx)(n.h3,{id:"bundler-integration",children:"Bundler integration"}),"\n",(0,s.jsx)(n.p,{children:"Co-locating packages is great, but how do you import and use them effectively? The easiest solution\nis to configure resolver aliases within your bundler (Webpack, Vite, etc). By doing so, you enable\nthe following functionality:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Avoids having to build (and rebuild) the package everytime its code changes."}),"\n",(0,s.jsx)(n.li,{children:"Enables file system watching of the package, not just the application."}),"\n",(0,s.jsx)(n.li,{children:"Allows for hot module reloading (HMR) to work."}),"\n",(0,s.jsx)(n.li,{children:"Package code is transpiled and bundled alongside application code."}),"\n"]}),"\n",(0,s.jsxs)(r.Z,{groupId:"bundler",defaultValue:"vite",values:[{label:"Vite",value:"vite"},{label:"Webpack",value:"webpack"}],children:[(0,s.jsx)(o.Z,{value:"vite",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="vite.config.ts"',children:"import path from 'path';\nimport { defineConfig } from 'vite';\n\nexport default defineConfig({\n  // ...\n  resolve: {\n    alias: {\n      '@company/utils': path.join(__dirname, '../packages/utils/src'),\n    },\n  },\n});\n"})})}),(0,s.jsx)(o.Z,{value:"webpack",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="webpack.config.js"',children:"const path = require('path');\n\nmodule.exports = {\n  // ...\n  resolve: {\n    alias: {\n      '@company/utils': path.join(__dirname, '../packages/utils/src'),\n    },\n  },\n};\n"})})})]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["When configuring aliases, we suggest using the ",(0,s.jsx)(n.code,{children:"package.json"})," name as the alias! This ensures that\non the consuming side, you're using the package as if it's a normal node module, and avoids\ndeviating from the ecosystem."]})}),"\n",(0,s.jsx)(n.h3,{id:"typescript-integration",children:"TypeScript integration"}),"\n",(0,s.jsxs)(n.p,{children:["We suggest using TypeScript project references. Luckily, we have an\n",(0,s.jsx)(n.a,{href:"./typescript-project-refs",children:"in-depth guide on how to properly and efficiently integrate them"}),"!"]})]})}function x(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},39798:(e,n,a)=>{a.d(n,{Z:()=>o});a(27378);var s=a(40624);const i={tabItem:"tabItem_wHwb"};var r=a(24246);function o(e){let{children:n,hidden:a,className:o}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,s.Z)(i.tabItem,o),hidden:a,children:n})}},33337:(e,n,a)=>{a.d(n,{Z:()=>u});var s=a(27378),i=a(40624),r=a(83457),o=a(35595),t=a(76457);const l={tabList:"tabList_J5MA",tabItem:"tabItem_l0OV"};var c=a(24246);function d(e){let{className:n,block:a,selectedValue:s,selectValue:o,tabValues:t}=e;const d=[],{blockElementScrollPositionUntilNextRender:p}=(0,r.o5)(),h=e=>{const n=e.currentTarget,a=d.indexOf(n),i=t[a].value;i!==s&&(p(n),o(i))},u=e=>{let n=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const a=d.indexOf(e.currentTarget)+1;n=d[a]??d[0];break}case"ArrowLeft":{const a=d.indexOf(e.currentTarget)-1;n=d[a]??d[d.length-1];break}}n?.focus()};return(0,c.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":a},n),children:t.map((e=>{let{value:n,label:a,attributes:r}=e;return(0,c.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>d.push(e),onKeyDown:u,onClick:h,...r,className:(0,i.Z)("tabs__item",l.tabItem,r?.className,{"tabs__item--active":s===n}),children:a??n},n)}))})}function p(e){let{lazy:n,children:a,selectedValue:i}=e;const r=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===i));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,c.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function h(e){const n=(0,o.Y)(e);return(0,c.jsxs)("div",{className:(0,i.Z)("tabs-container",l.tabList),children:[(0,c.jsx)(d,{...n,...e}),(0,c.jsx)(p,{...n,...e})]})}function u(e){const n=(0,t.Z)();return(0,c.jsx)(h,{...e,children:(0,o.h)(e.children)},String(n))}},35595:(e,n,a)=>{a.d(n,{Y:()=>u,h:()=>c});var s=a(27378),i=a(3620),r=a(9834),o=a(30654),t=a(70784),l=a(55643);function c(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:n,children:a}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return c(e).map((e=>{let{props:{value:n,label:a,attributes:s,default:i}}=e;return{value:n,label:a,attributes:s,default:i}}))}(a);return function(e){const n=(0,t.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function p(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:a}=e;const r=(0,i.k6)(),t=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,o._X)(t),(0,s.useCallback)((e=>{if(!t)return;const n=new URLSearchParams(r.location.search);n.set(t,e),r.replace({...r.location,search:n.toString()})}),[t,r])]}function u(e){const{defaultValue:n,queryString:a=!1,groupId:i}=e,o=d(e),[t,c]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=a.find((e=>e.default))??a[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:o}))),[u,g]=h({queryString:a,groupId:i}),[j,m]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,r]=(0,l.Nk)(a);return[i,(0,s.useCallback)((e=>{a&&r.set(e)}),[a,r])]}({groupId:i}),x=(()=>{const e=u??j;return p({value:e,tabValues:o})?e:null})();(0,r.Z)((()=>{x&&c(x)}),[x]);return{selectedValue:t,selectValue:(0,s.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);c(e),g(e),m(e)}),[g,m,o]),tabValues:o}}},71670:(e,n,a)=>{a.d(n,{Z:()=>t,a:()=>o});var s=a(27378);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);