"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[10639],{96750:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>a,toc:()=>c});var t=n(24246),s=n(71670),r=n(88109);const l={slug:"proto-v0.40",title:"proto v0.40 - Config mode, progress bars, and more",authors:["milesj"],tags:["config","mode","progress","install","http","request","fetch"]},i=void 0,a={permalink:"/blog/proto-v0.40",editUrl:"https://github.com/moonrepo/moon/tree/master/website/blog/2024-08-16_proto-v0.40.mdx",source:"@site/blog/2024-08-16_proto-v0.40.mdx",title:"proto v0.40 - Config mode, progress bars, and more",description:"This is a small release that includes many quality of life improvements.",date:"2024-08-16T00:00:00.000Z",tags:[{inline:!0,label:"config",permalink:"/blog/tags/config"},{inline:!0,label:"mode",permalink:"/blog/tags/mode"},{inline:!0,label:"progress",permalink:"/blog/tags/progress"},{inline:!0,label:"install",permalink:"/blog/tags/install"},{inline:!0,label:"http",permalink:"/blog/tags/http"},{inline:!0,label:"request",permalink:"/blog/tags/request"},{inline:!0,label:"fetch",permalink:"/blog/tags/fetch"}],readingTime:2.5,hasTruncateMarker:!0,authors:[{name:"Miles Johnson",title:"Founder, developer",url:"https://github.com/milesj",imageURL:"/img/authors/miles.jpg",key:"milesj"}],frontMatter:{slug:"proto-v0.40",title:"proto v0.40 - Config mode, progress bars, and more",authors:["milesj"],tags:["config","mode","progress","install","http","request","fetch"]},unlisted:!1,prevItem:{title:"moon v1.28 - Task presets, OS tasks, meta tokens, and more",permalink:"/blog/moon-v1.28"},nextItem:{title:"proto v0.39 - Mid-year quality of life improvements",permalink:"/blog/proto-v0.39"}},d={authorsImageUrls:[void 0]},c=[{value:"New <code>--config-mode</code> global option",id:"new---config-mode-global-option",level:2},{value:"Improved progress bars",id:"improved-progress-bars",level:2},{value:"Improved HTTP requests",id:"improved-http-requests",level:2},{value:"Other changes",id:"other-changes",level:2}];function h(e){const o={a:"a",code:"code",em:"em",h2:"h2",li:"li",p:"p",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.p,{children:"This is a small release that includes many quality of life improvements."}),"\n",(0,t.jsxs)(o.h2,{id:"new---config-mode-global-option",children:["New ",(0,t.jsx)(o.code,{children:"--config-mode"})," global option"]}),"\n",(0,t.jsxs)(o.p,{children:["When proto is ran, we find and load all applicable ",(0,t.jsxs)(o.a,{href:"/docs/proto/config",children:[(0,t.jsx)(o.code,{children:".prototools"})," files"]}),". For\nthe most part, we would traverse upwards, and sometimes load ",(0,t.jsx)(o.code,{children:"~/.proto/.prototools"}),", while other\ntimes not. It was quite confusing when certain config files were loaded. This was further\nexacerbated by the ",(0,t.jsx)(o.code,{children:"--include-global"})," and ",(0,t.jsx)(o.code,{children:"--only-local"})," options, which were only available to some\ncommands (and have been removed entirely)."]}),"\n",(0,t.jsxs)(o.p,{children:["To remedy and standardize this, we're introducing a new global option\n",(0,t.jsx)(o.a,{href:"/docs/proto/config#resolution-mode",children:(0,t.jsx)(o.code,{children:"--config-mode"})})," (",(0,t.jsx)(o.code,{children:"-c"}),"), which controls how configuration are\nloaded. This option supports the following values."]}),"\n",(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsxs)(o.li,{children:[(0,t.jsx)(o.code,{children:"global"})," - Only load ",(0,t.jsx)(o.code,{children:"~/.proto/.prototools"}),"."]}),"\n",(0,t.jsxs)(o.li,{children:[(0,t.jsx)(o.code,{children:"local"})," - Only load ",(0,t.jsx)(o.code,{children:"./.prototools"})," in the current directory."]}),"\n",(0,t.jsxs)(o.li,{children:[(0,t.jsx)(o.code,{children:"upwards"})," - Load ",(0,t.jsx)(o.code,{children:".prototools"})," while traversing upwards, but do not load ",(0,t.jsx)(o.code,{children:"~/.proto/.prototools"}),"."]}),"\n",(0,t.jsxs)(o.li,{children:[(0,t.jsx)(o.code,{children:"upwards-global"})," / ",(0,t.jsx)(o.code,{children:"all"})," - Load ",(0,t.jsx)(o.code,{children:".prototools"})," while traversing upwards, and do load\n",(0,t.jsx)(o.code,{children:"~/.proto/.prototools"}),"."]}),"\n"]}),"\n",(0,t.jsx)(o.p,{children:"Now what is the default mode? As mentioned above, we wanted to standardize the default across all\ncommands, but the problem is, is that each command has different requirements. So in the end, the\ndefault mode is actually 2 different modes depending on the command being ran, which is:"}),"\n",(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsxs)(o.li,{children:["For ",(0,t.jsx)(o.code,{children:"activate"}),", ",(0,t.jsx)(o.code,{children:"install"}),", ",(0,t.jsx)(o.code,{children:"outdated"}),", ",(0,t.jsx)(o.code,{children:"status"})," commands -> ",(0,t.jsx)(o.code,{children:"upwards"})," mode"]}),"\n",(0,t.jsxs)(o.li,{children:["All other commands -> ",(0,t.jsx)(o.code,{children:"upwards-global"})," mode"]}),"\n"]}),"\n",(0,t.jsx)(o.h2,{id:"improved-progress-bars",children:"Improved progress bars"}),"\n",(0,t.jsxs)(o.p,{children:["We've improved (or added) the progress bars for ",(0,t.jsx)(o.a,{href:"/docs/proto/commands/install",children:(0,t.jsx)(o.code,{children:"proto install"})}),",\n",(0,t.jsx)(o.a,{href:"/docs/proto/commands/upgrade",children:(0,t.jsx)(o.code,{children:"proto upgrade"})}),", and the auto-install flow for\n",(0,t.jsx)(o.a,{href:"/docs/proto/commands/run",children:(0,t.jsx)(o.code,{children:"proto run"})}),". The progress bars will now display the current phase\n(download, unpack, etc), and the download phase will now include current / total downloaded bytes."]}),"\n",(0,t.jsx)(o.p,{children:"Furthermore, when installing multiple tools, we now display a progress bar for each tool."}),"\n",(0,t.jsx)(r.Z,{src:n(7420),width:"100%"}),"\n",(0,t.jsx)(o.h2,{id:"improved-http-requests",children:"Improved HTTP requests"}),"\n",(0,t.jsxs)(o.p,{children:["For historical context, requests made from the proto CLI itself use a different HTTP client than\nrequests made from a WASM plugin. The reason for this is that the Rust-based HTTP client that proto\nuses is not compatible within WASM, so plugins use a different library. This disconnect meant that\nWASM requests did ",(0,t.jsx)(o.em,{children:"not"})," inherit the ",(0,t.jsx)(o.a,{href:"/docs/proto/config#settingshttp",children:(0,t.jsx)(o.code,{children:"[settings.http]"})})," settings,\nwhich meant in some cases, requests would fail or not authenticate correctly, and there was no\nwork-around."]}),"\n",(0,t.jsxs)(o.p,{children:["This is a very tricky problem to solve, but we have implemented a possible solution through a\nconcept known as ",(0,t.jsx)(o.a,{href:"/docs/guides/wasm-plugins#host-functions--macros",children:"host functions"}),". Host functions\nare basically functions that exist on the host machine (proto), and can be called from the guest\nruntime (WASM). This new host function utilizes the same HTTP client as proto to make requests,\nwhich results in WASM no longer being disconnected."]}),"\n",(0,t.jsx)(o.p,{children:"However, since there is a cost for calling host functions from the guest, and then serializing the\nresponse from the host back to the guest, there is a small chance that performance will be affected.\nWe will continue to monitor the implementation, so please report any issues!"}),"\n",(0,t.jsx)(o.h2,{id:"other-changes",children:"Other changes"}),"\n",(0,t.jsxs)(o.p,{children:["View the ",(0,t.jsx)(o.a,{href:"https://github.com/moonrepo/proto/releases/tag/v0.40.0",children:"official release"})," for a full list\nof changes."]}),"\n",(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsxs)(o.li,{children:["Removed ",(0,t.jsx)(o.code,{children:"--include-global"})," and ",(0,t.jsx)(o.code,{children:"--only-local"})," flags from all applicable commands. Use the new\n",(0,t.jsx)(o.code,{children:"--config-mode"})," instead."]}),"\n"]})]})}function p(e={}){const{wrapper:o}={...(0,s.a)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},88109:(e,o,n)=>{n.d(o,{Z:()=>s});var t=n(24246);function s(e){let{src:o,width:n="90%",alt:s="",title:r,align:l="center",padding:i="1rem"}=e;return(0,t.jsx)("div",{style:{marginBottom:i,marginTop:i,textAlign:l},children:(0,t.jsx)("img",{src:o.default,width:n,alt:s,title:r,className:"inline-block"})})}},7420:(e,o,n)=>{n.r(o),n.d(o,{default:()=>t});const t=n.p+"assets/images/v0.40-progress-9b4c68fcd969d5312791dc1234379127.png"},71670:(e,o,n)=>{n.d(o,{Z:()=>i,a:()=>l});var t=n(27378);const s={},r=t.createContext(s);function l(e){const o=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function i(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(r.Provider,{value:o},e.children)}}}]);