"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[35334],{49106:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var t=o(24246),s=o(71670);const r={slug:"v0.16",title:"moon v0.16 - Per-project tool versions and TypeScript improvements",authors:["milesj"],tags:["toolchain","runner","generator","typescript","node"],image:"./img/v0.16.png"},i=void 0,c={permalink:"/blog/v0.16",editUrl:"https://github.com/moonrepo/moon/tree/master/website/blog/2022-10-06_v0.16.mdx",source:"@site/blog/2022-10-06_v0.16.mdx",title:"moon v0.16 - Per-project tool versions and TypeScript improvements",description:"With this release, we've landed a long standing request of supporting project-level overrides for",date:"2022-10-06T00:00:00.000Z",tags:[{label:"toolchain",permalink:"/blog/tags/toolchain"},{label:"runner",permalink:"/blog/tags/runner"},{label:"generator",permalink:"/blog/tags/generator"},{label:"typescript",permalink:"/blog/tags/typescript"},{label:"node",permalink:"/blog/tags/node"}],readingTime:3.265,hasTruncateMarker:!0,authors:[{name:"Miles Johnson",title:"Founder, developer",url:"https://github.com/milesj",imageURL:"/img/authors/miles.jpg",key:"milesj"}],frontMatter:{slug:"v0.16",title:"moon v0.16 - Per-project tool versions and TypeScript improvements",authors:["milesj"],tags:["toolchain","runner","generator","typescript","node"],image:"./img/v0.16.png"},unlisted:!1,prevItem:{title:"New VS Code extension!",permalink:"/blog/vscode-extension"},nextItem:{title:"moon v0.15 - Enhanced Docker support and 1,000 stars!",permalink:"/blog/v0.15"}},a={image:o(37352).Z,authorsImageUrls:[void 0]},l=[{value:"Per-project tool version overrides",id:"per-project-tool-version-overrides",level:2},{value:"Per-project dependency installs",id:"per-project-dependency-installs",level:2},{value:"TypeScript improvements",id:"typescript-improvements",level:2},{value:"Routing <code>outDir</code> to the cache",id:"routing-outdir-to-the-cache",level:3},{value:"Mapping project references as <code>paths</code>",id:"mapping-project-references-as-paths",level:3},{value:"Other changes",id:"other-changes",level:2},{value:"What&#39;s next?",id:"whats-next",level:2}];function p(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"With this release, we've landed a long standing request of supporting project-level overrides for\ntools configured in the workspace, as well as some quality of life improvements for TypeScript."}),"\n",(0,t.jsx)(n.h2,{id:"per-project-tool-version-overrides",children:"Per-project tool version overrides"}),"\n",(0,t.jsxs)(n.p,{children:["Since moons inception, our ",(0,t.jsx)(n.a,{href:"../docs/concepts/toolchain",children:"toolchain"})," has only supported a single\nversion of a tool (Node.js), as we wanted to embrace the single version policy and encourage all\nconsumers to keep their tooling version consistent across all projects for reliability. While this\nworks flawlessly, it's not entirely realistic, as many companies have legacy projects that are stuck\non older versions for whatever reason, and integrating them into moon was rather difficult."]}),"\n",(0,t.jsxs)(n.p,{children:["Well no more! We've refactored our toolchain to support tool overrides on a project-by-project\nbasis. Since we only support Node.js at the moment, this can be achieved with the new\n",(0,t.jsx)(n.a,{href:"../docs/config/project#node",children:(0,t.jsx)(n.code,{children:"workspace.node.version"})})," setting in\n",(0,t.jsx)(n.a,{href:"../docs/config/project",children:(0,t.jsx)(n.code,{children:"moon.yml"})}),"."]}),"\n",(0,t.jsx)(n.p,{children:"For example, if your workspace Node.js version is configured as v18."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/workspace.yml"',children:"node:\n  version: '18.0.0'\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can now override this version at the project-level. Let's go with v14."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="<project>/moon.yml"',children:"workspace:\n  node:\n    version: '14.0.0'\n"})}),"\n",(0,t.jsx)(n.p,{children:"When running a task from a project with overrides, the toolchain will download, install, and\nconfigure the new version behind the scenes. This new version will then be used to install\ndependencies and execute the tasks commands."}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Although we now support overriding the tool version, the workspace configured package manager\n(",(0,t.jsx)(n.code,{children:"node.packageManager"}),") and associated version cannot be overridden. This is unlikely to change."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"per-project-dependency-installs",children:"Per-project dependency installs"}),"\n",(0,t.jsx)(n.p,{children:"Because of the toolchain refactor above, we now support per-project dependency installs as a welcome\nside-effect. This is a necessary step in supporting new languages, especially for those that don't\ninstall dependencies in the workspace for all projects, and must install them per project."}),"\n",(0,t.jsxs)(n.p,{children:["This also means that moon now supports non-",(0,t.jsx)(n.code,{children:"package.json"})," workspaces! If your repository ",(0,t.jsx)(n.em,{children:"is not"}),"\nusing npm/pnpm/yarn workspaces, or a project ",(0,t.jsx)(n.em,{children:"is not"})," listed within the workspaces glob list,\ndependencies will be installed within the project."]}),"\n",(0,t.jsx)(n.h2,{id:"typescript-improvements",children:"TypeScript improvements"}),"\n",(0,t.jsxs)(n.h3,{id:"routing-outdir-to-the-cache",children:["Routing ",(0,t.jsx)(n.code,{children:"outDir"})," to the cache"]}),"\n",(0,t.jsxs)(n.p,{children:["A requirement for using project references is that each project must compile declarations (",(0,t.jsx)(n.code,{children:".d.ts"}),")\nso that consumers/dependents can resolve type information. While this makes sense, it becomes rather\nunfortunate as each project folder is now littered with the declaration outputs, which are typically\ngitignored."]}),"\n",(0,t.jsxs)(n.p,{children:["To improve this experience, we're introducing a new setting\n",(0,t.jsx)(n.a,{href:"../docs/config/toolchain#routeoutdirtocache",children:(0,t.jsx)(n.code,{children:"typescript.routeOutDirToCache"})}),", that will update the\n",(0,t.jsx)(n.code,{children:"outDir"})," compiler option of ",(0,t.jsx)(n.em,{children:"all"})," projects to route to moon's cache directory (which should already\nbe gitignored). This will standardize the use of project references for the entire repository."]}),"\n",(0,t.jsx)(n.p,{children:'For example, a project at "packages/components" will route to the following output directory:'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",metastring:'title="<project>/tsconfig.json"',children:'{\n  // ...\n  "compilerOptions": {\n    // ...\n    "outDir": "../../.moon/cache/types/packages/components"\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["If you require declarations to live within the project, for example an npm package that ships\ntypes, you should introduce an additional configuration to handle this, like\n",(0,t.jsx)(n.code,{children:"tsconfig.build.json"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"mapping-project-references-as-paths",children:["Mapping project references as ",(0,t.jsx)(n.code,{children:"paths"})]}),"\n",(0,t.jsxs)(n.p,{children:["moon automatically keeps TypeScript project references in sync with the\n",(0,t.jsx)(n.a,{href:"../docs/config/toolchain#syncprojectreferences",children:(0,t.jsx)(n.code,{children:"typescript.syncProjectReferences"})})," setting, which\nis great, but we can take it further. With the new\n",(0,t.jsx)(n.a,{href:"../docs/config/toolchain#syncprojectreferencestopaths",children:(0,t.jsx)(n.code,{children:"typescript.syncProjectReferencesToPaths"})}),"\nsetting, project references (either synced or explicitly defined) will ",(0,t.jsx)(n.em,{children:"also"})," be mapped to the\n",(0,t.jsx)(n.code,{children:"paths"})," compiler option, automating the list of import aliases."]}),"\n",(0,t.jsxs)(n.p,{children:["For example, if a reference has the package name ",(0,t.jsx)(n.code,{children:"@brand/components"}),", the ",(0,t.jsx)(n.code,{children:"paths"})," will be mapped\nwith:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",metastring:'title="<project>/tsconfig.json"',children:'{\n  // ...\n  "compilerOptions": {\n    // ...\n    "paths": {\n      "@brand/components": ["../shared/components/src/index.ts"],\n      "@brand/components/*": ["../shared/components/src/*"]\n    }\n  },\n  "references": [\n    {\n      "path": "../shared/components"\n    }\n  ]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"other-changes",children:"Other changes"}),"\n",(0,t.jsxs)(n.p,{children:["View the\n",(0,t.jsx)(n.a,{href:"https://github.com/moonrepo/moon/releases/tag/%40moonrepo%2Fcli%400.16.0",children:"official release"})," for a\nfull list of changes."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Template files can now be suffixed with ",(0,t.jsx)(n.code,{children:".tera"})," or ",(0,t.jsx)(n.code,{children:".twig"})," for\n",(0,t.jsx)(n.a,{href:"../docs/guides/codegen#file-extensions",children:"syntax highlighting"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"We now display more commands and information when running tasks."}),"\n",(0,t.jsxs)(n.li,{children:["Declare implicit task dependencies with a new ",(0,t.jsx)(n.a,{href:"../docs/config/workspace",children:(0,t.jsx)(n.code,{children:"runner.implicitDeps"})}),"\nsetting."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"whats-next",children:"What's next?"}),"\n",(0,t.jsx)(n.p,{children:"Expect the following in the v0.17 release!"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Webhooks for important pipeline events (for real this time)!"}),"\n",(0,t.jsx)(n.li,{children:"YAML anchors and references in config files."}),"\n",(0,t.jsxs)(n.li,{children:["And ",(0,t.jsx)(n.a,{href:"https://github.com/moonrepo/moon/issues/356",children:"many more"}),"..."]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},37352:(e,n,o)=>{o.d(n,{Z:()=>t});const t=o.p+"assets/images/v0.16-59818abc1e7c124baa536d87936ee00b.png"},71670:(e,n,o)=>{o.d(n,{Z:()=>c,a:()=>i});var t=o(27378);const s={},r=t.createContext(s);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);